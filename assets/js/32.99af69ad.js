(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{500:function(_,v,t){"use strict";t.r(v);var s=t(29),a=Object(s.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"第三章、指令系统与汇编语言程序设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第三章、指令系统与汇编语言程序设计"}},[_._v("#")]),_._v(" 第三章、指令系统与汇编语言程序设计")]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("三、指令系统与汇编语言程序设计\n（一）知识范围\n指令系统的概念、指令格式；\n对操作数的寻址方式；\n常用指令（传送指令、算术运算指令、逻辑运算和移位指令、串操作指令、程序控制指令与处理器控制指令）；\n汇编语言程序的基本结构；\n常用伪指令（数据定义、符号定义、段定义、设定段寄存器）；\nDOS功能调用（输入/输出字符、输入/输出字符串、结束程序）；\n三种结构（顺序结构、分支结构和循环结构）程序设计；\n常用程序设计举例。\n（二）考核要求\n1.\t理解指令系统的概念及指令格式。\n2.\t掌握常用的寻址方式并能熟练地使用它们。\n3.\t掌握常用指令的格式、功能和使用方法，分析各种指令执行后的结果。\n4.\t掌握指令对状态标志的影响。\n5.\t掌握常用伪指令的格式和功能。\n6.\t掌握汇编语言源程序的构成，熟练掌握汇编语言程序上机调试运行过程。\n7.\t理解程序的三种基本结构，能够使用汇编语言解决常见的问题。\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br"),t("span",{staticClass:"line-number"},[_._v("4")]),t("br"),t("span",{staticClass:"line-number"},[_._v("5")]),t("br"),t("span",{staticClass:"line-number"},[_._v("6")]),t("br"),t("span",{staticClass:"line-number"},[_._v("7")]),t("br"),t("span",{staticClass:"line-number"},[_._v("8")]),t("br"),t("span",{staticClass:"line-number"},[_._v("9")]),t("br"),t("span",{staticClass:"line-number"},[_._v("10")]),t("br"),t("span",{staticClass:"line-number"},[_._v("11")]),t("br"),t("span",{staticClass:"line-number"},[_._v("12")]),t("br"),t("span",{staticClass:"line-number"},[_._v("13")]),t("br"),t("span",{staticClass:"line-number"},[_._v("14")]),t("br"),t("span",{staticClass:"line-number"},[_._v("15")]),t("br"),t("span",{staticClass:"line-number"},[_._v("16")]),t("br"),t("span",{staticClass:"line-number"},[_._v("17")]),t("br"),t("span",{staticClass:"line-number"},[_._v("18")]),t("br")])]),t("h2",{attrs:{id:"_1-指令系统及指令格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-指令系统及指令格式"}},[_._v("#")]),_._v(" 1. 指令系统及指令格式")]),_._v(" "),t("p",[_._v("特点：")]),_._v(" "),t("ul",[t("li",[_._v("指令系统的兼容性")]),_._v(" "),t("li",[_._v("指令系统的灵活性")]),_._v(" "),t("li",[_._v("寻址方式的多样性")]),_._v(" "),t("li",[_._v("可对多种类型的数据进行处理")]),_._v(" "),t("li",[_._v("可构成多处理机系统")])]),_._v(" "),t("p",[_._v("**指令：**控制计算完成特定操作的命令")]),_._v(" "),t("p",[_._v("**指令系统：**指令系统是计算机能够执行全部命令的集合，它其取决于计算机的硬件设计。指令系统因机而异，没有通用性。")]),_._v(" "),t("p",[_._v("指令中应包含的信息：执行的运算、运算结果的去向、运算数据的来源")]),_._v(" "),t("p",[t("strong",[_._v("指令格式：")])]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("操作码\t\t [操作数]\t,\t[操作数]\n----- \t   --------     --------\n   |\t\t\t|\t\t\t|\n执行何种操作\t目的操作数  ， 源操作数【参加操作的数据】\n\n源操作数：指令加工前的数据\n目的操作数：指令加工之后形成的数据\n\n零操作数指令：操作码\n单操作数指令：操作码\t操作数\n双操作数指令：操作码\t目的操作数，源操作数\n\n操作数形式：\n立即数、寄存器、存储器\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br"),t("span",{staticClass:"line-number"},[_._v("4")]),t("br"),t("span",{staticClass:"line-number"},[_._v("5")]),t("br"),t("span",{staticClass:"line-number"},[_._v("6")]),t("br"),t("span",{staticClass:"line-number"},[_._v("7")]),t("br"),t("span",{staticClass:"line-number"},[_._v("8")]),t("br"),t("span",{staticClass:"line-number"},[_._v("9")]),t("br"),t("span",{staticClass:"line-number"},[_._v("10")]),t("br"),t("span",{staticClass:"line-number"},[_._v("11")]),t("br"),t("span",{staticClass:"line-number"},[_._v("12")]),t("br"),t("span",{staticClass:"line-number"},[_._v("13")]),t("br"),t("span",{staticClass:"line-number"},[_._v("14")]),t("br")])]),t("hr"),_._v(" "),t("h3",{attrs:{id:"_1-1操作数形式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1操作数形式"}},[_._v("#")]),_._v(" 1.1操作数形式")]),_._v(" "),t("p",[t("strong",[_._v("立即数操作数：")])]),_._v(" "),t("ul",[t("li",[_._v("表示参加操作的数据本身，可以是8位或16位；")]),_._v(" "),t("li",[_._v("立即数无法作为目标操作数；")]),_._v(" "),t("li",[_._v("立即数可以是无符号或带符号数，其数值应在可取值范围内。")])]),_._v(" "),t("p",[t("strong",[_._v("寄存器操作数：")])]),_._v(" "),t("ul",[t("li",[_._v("表示参加运算的数存放在指令给出的寄存器中，可以是16位或8位。")])]),_._v(" "),t("p",[t("strong",[_._v("存储器操作数：")])]),_._v(" "),t("ul",[t("li",[_._v("表示当前参加运算的数存放在存储器的某一个或两个单元中。")])]),_._v(" "),t("p",[t("strong",[_._v("指令的字长与指令的执行速度：")])]),_._v(" "),t("ul",[t("li",[_._v("指令字长由操作码的长度、操作数地址长度、操作数个数决定")]),_._v(" "),t("li",[_._v("8088/8086 CPU采用变字长指令格式")]),_._v(" "),t("li",[_._v("指令的字长影响指令执行的速度")]),_._v(" "),t("li",[_._v("对不同的操作数，指令执行的时间不同：")])]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("存储器 → 立即数 → 寄存器\n----------------------\n慢\t\t→\t\t  快\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br")])]),t("hr"),_._v(" "),t("h3",{attrs:{id:"_1-2-8086的操作码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-8086的操作码"}},[_._v("#")]),_._v(" 1.2 8086的操作码")]),_._v(" "),t("p",[_._v("指令由操作码（Opcode）和操作数（地址码）组成。8086 的指令长度是可变的，一条指令般由 1~6字节组成（加上前级字节，最长可为7宇节)。指令的操作码采用二进制代码表示本指会所执行的操作，通常用指令的第一个字节表示。有时由于用8位不够，因此在指令的第二个字节中还可能占了位。除此以外的其他字节 （或位）用来表示操作数。\n在多数操作码中，使用某些位来指示有关信息，常用的符号及含义如下：\n◎W（字位）：表示本指令是对字（W=1）还是对字节（W=0）操作。")]),_._v(" "),t("p",[_._v("◎D（方向位）：表示参加操作的寄存器是作为目的操作数寄存器（D=1）还是作为源操作数寄存器（D=0）。")]),_._v(" "),t("p",[_._v("◎S（符号扩展位）：用于某些立即寻址的机器指令中。如果立即数为8位，但要求扩展成16位，则S=1；否则，S=0（所扩展的高8位要根据8位立即数的最高位来定）。")]),_._v(" "),t("hr"),_._v(" "),t("h3",{attrs:{id:"_1-3-8086指令中寄存器的编码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-8086指令中寄存器的编码"}},[_._v("#")]),_._v(" 1.3 8086指令中寄存器的编码")]),_._v(" "),t("ol",[t("li",[_._v("指令的二进制一般形式")])]),_._v(" "),t("p",[_._v("8086指令的二进制一般形式如下："),t("code",[_._v("操作码 d/v/s w")])]),_._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[_._v("编码模式")])]),_._v(" "),t("p",[_._v("编码方式主要有以下三种：段寄存器编码、通用寄存器编码、内存寻址编码。")]),_._v(" "),t("ul",[t("li",[_._v("段寄存器编码")])]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("编码")]),_._v(" "),t("th",[_._v("段寄存器编码")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("00")]),_._v(" "),t("td",[_._v("ES")])]),_._v(" "),t("tr",[t("td",[_._v("01")]),_._v(" "),t("td",[_._v("CS")])]),_._v(" "),t("tr",[t("td",[_._v("10")]),_._v(" "),t("td",[_._v("SS")])]),_._v(" "),t("tr",[t("td",[_._v("11")]),_._v(" "),t("td",[_._v("DS")])])])]),_._v(" "),t("ul",[t("li",[_._v("通用寄存器编码")])]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("编码")]),_._v(" "),t("th",[_._v("16位寄存器名")]),_._v(" "),t("th",[_._v("8位寄存器名")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("000")]),_._v(" "),t("td",[_._v("AX")]),_._v(" "),t("td",[_._v("AL")])]),_._v(" "),t("tr",[t("td",[_._v("001")]),_._v(" "),t("td",[_._v("CX")]),_._v(" "),t("td",[_._v("CL")])]),_._v(" "),t("tr",[t("td",[_._v("010")]),_._v(" "),t("td",[_._v("DX")]),_._v(" "),t("td",[_._v("DL")])]),_._v(" "),t("tr",[t("td",[_._v("011")]),_._v(" "),t("td",[_._v("BX")]),_._v(" "),t("td",[_._v("XL")])]),_._v(" "),t("tr",[t("td",[_._v("100")]),_._v(" "),t("td",[_._v("SP")]),_._v(" "),t("td",[_._v("AH")])]),_._v(" "),t("tr",[t("td",[_._v("101")]),_._v(" "),t("td",[_._v("BP")]),_._v(" "),t("td",[_._v("CH")])]),_._v(" "),t("tr",[t("td",[_._v("110")]),_._v(" "),t("td",[_._v("SI")]),_._v(" "),t("td",[_._v("DH")])]),_._v(" "),t("tr",[t("td",[_._v("111")]),_._v(" "),t("td",[_._v("DI")]),_._v(" "),t("td",[_._v("BH")])])])]),_._v(" "),t("ul",[t("li",[_._v("内存寻址编码")])]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("r/m编码")]),_._v(" "),t("th",[_._v("基址寄存器")]),_._v(" "),t("th",[_._v("变址寄存器")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("000")]),_._v(" "),t("td",[_._v("BX     +")]),_._v(" "),t("td",[_._v("SI")])]),_._v(" "),t("tr",[t("td",[_._v("001")]),_._v(" "),t("td",[_._v("BX     +")]),_._v(" "),t("td",[_._v("DI")])]),_._v(" "),t("tr",[t("td",[_._v("010")]),_._v(" "),t("td",[_._v("BP     +")]),_._v(" "),t("td",[_._v("SI")])]),_._v(" "),t("tr",[t("td",[_._v("011")]),_._v(" "),t("td",[_._v("BP      +")]),_._v(" "),t("td",[_._v("DI")])]),_._v(" "),t("tr",[t("td",[_._v("100")]),_._v(" "),t("td"),_._v(" "),t("td",[_._v("SI")])]),_._v(" "),t("tr",[t("td",[_._v("101")]),_._v(" "),t("td"),_._v(" "),t("td",[_._v("SI")])]),_._v(" "),t("tr",[t("td",[_._v("110")]),_._v(" "),t("td",[_._v("BP")]),_._v(" "),t("td")]),_._v(" "),t("tr",[t("td",[_._v("111")]),_._v(" "),t("td",[_._v("BX")]),_._v(" "),t("td")])])]),_._v(" "),t("p",[_._v("8086指令中通常使用一个或两个操作数，在少数指令中隐含的第三个操作数。")]),_._v(" "),t("h3",{attrs:{id:"_1-4指令的寻址方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4指令的寻址方式"}},[_._v("#")]),_._v(" 1.4指令的寻址方式")]),_._v(" "),t("p",[_._v("指令的寻址方式就是寻找指令操作数所在地址的方式，以确定数据的来源和去处。")]),_._v(" "),t("ol",[t("li",[t("strong",[_._v("立即寻址（立即数寻址）：")])])]),_._v(" "),t("p",[_._v("指令操作数部分直接给出指令的操作数，它与指令操作码相接，顺序存放在代码中。立即数有8位和16位之分。")]),_._v(" "),t("p",[_._v("注意：")]),_._v(" "),t("ul",[t("li",[_._v("立即寻址方式只能用于源操作数，主要用于给寄存器赋值。")]),_._v(" "),t("li",[_._v("立即寻址方式不执行总线周期，执行速度快。")])]),_._v(" "),t("hr"),_._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("strong",[_._v("寄存器寻址：")])])]),_._v(" "),t("ul",[t("li",[_._v("操作数放在寄存器内，由指令直接给出某个寄存器的名字，以寄存器的内容作为操作数。")]),_._v(" "),t("li",[_._v("寄存器可以是16位的AX、BX、CX、DX、SI、DI、SP、BP寄存器，也可以是8位的AH、AL、BX、XL、CH、CL、DH、DL寄存器。")])]),_._v(" "),t("p",[_._v("注意：")]),_._v(" "),t("ul",[t("li",[_._v("寄存器寻址方式的指令操作在CPU内部执行，不需要执行总线周期，执行速度快。")]),_._v(" "),t("li",[_._v("寄存器寻址方式既适用于指令的源操作数，也适用于目的操作数，并且可同时使用于源操作数和目的操作数。")])]),_._v(" "),t("hr"),_._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[t("strong",[_._v("直接寻址：")])])]),_._v(" "),t("p",[_._v("操作数在存储器中，指令中直接给出操作数所在存储单元的有效地址EA，即段内偏移地址，表示操作数所在存储单元距离段首址的字节数。有效地址是一个无符号的16位二进制数。（直接给出偏移地址）")]),_._v(" "),t("p",[_._v("注意：")]),_._v(" "),t("ul",[t("li",[_._v("直接寻址方式的操作数所在存储单元的短地址一般在数据段寄存器DS中。（默认DS段）")]),_._v(" "),t("li",[_._v("如果操作数在其他段，则需要在指令中用段超越前缀指出相应的段寄存器名。")])]),_._v(" "),t("hr"),_._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[t("strong",[_._v("寄存器间接寻址：")])])]),_._v(" "),t("ul",[t("li",[_._v("操作数在存储器中，指令中寄存器的内容作为操作数所在单元的有效地址EA（偏移地址）。寄存器仅限于BX、BP、SI、DI。")])]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("\t|[SI]\n\t|[DI]\nEA- |[BX]\n\t|[BP]\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br"),t("span",{staticClass:"line-number"},[_._v("4")]),t("br")])]),t("ul",[t("li",[_._v("当使用BX、SI、DI时，操作数所在存储单元的段地址存在数据段寄存器DS中。")]),_._v(" "),t("li",[_._v("当使用BP时，操作数所在存储单元的段地址存在堆栈段寄存器SS中。")])]),_._v(" "),t("p",[_._v("注意：")]),_._v(" "),t("ul",[t("li",[_._v("只有SI、DI、BX、BP可作为间接寻址器。")]),_._v(" "),t("li",[_._v("若操作指令所在存储单元不在数据段DS中，需要在指令中用段超越前缀表明其所在段的段名。")])]),_._v(" "),t("hr"),_._v(" "),t("ol",{attrs:{start:"5"}},[t("li",[t("strong",[_._v("基址寻址：")])])]),_._v(" "),t("ul",[t("li",[_._v("操作数在存储器内，指令中寄存器（BX或BP）的内容与指令指定的位移量之和作为操作数所在存储单元的有效地址EA（偏移地址）。")])]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("\t|[BX]|\nEA= |\t |->[8位或16位位移量]\n\t|[BP]|\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br")])]),t("ul",[t("li",[_._v("当使用BX时，段地址为DS的内容；")]),_._v(" "),t("li",[_._v("当使用BP时，段地址为SS的内容。")])]),_._v(" "),t("hr"),_._v(" "),t("ol",{attrs:{start:"6"}},[t("li",[t("strong",[_._v("变址寻址：")])])]),_._v(" "),t("ul",[t("li",[_._v("操作数在存储器内，指令将变址寄存器SI、DI内容与指令指定的偏移位移量之和作为操作数所在存储单元的有效地址EA（偏移地址）。段地址规定为DS的内容。")])]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("\t|[SI]|\nEA= |\t |->[8位或16位位移量]\n\t|[DI]|\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br")])]),t("hr"),_._v(" "),t("ol",{attrs:{start:"7"}},[t("li",[t("strong",[_._v("基址加变址寄存器：")])])]),_._v(" "),t("ul",[t("li",[_._v("操作数在内部寄存器内。指令将基址寄存器BX、BP与变址寄存器SI、DI的内容之和再加上之前的偏移量（8位或16位），得到操作数所在存储单元的有效地址EA。")])]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("\t|[SI]|\t |[SI]|\nEA= |\t | + |\t  | + ->[8位或16位位移量]\n\t|[DI]|\t |[DI]|\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br")])]),t("ul",[t("li",[_._v("当使用BX时，段地址寄存器为DS。")]),_._v(" "),t("li",[_._v("当使用BP时，段地址寄存器为SS。")])]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("MOV 寄存器,[BX/BP+SI/DI+n]\n // n为16进制地址,\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br")])]),t("hr"),_._v(" "),t("ol",{attrs:{start:"8"}},[t("li",[t("strong",[_._v("字符串寻址：")])])]),_._v(" "),t("ul",[t("li",[_._v("用于字符串操作指令。规定变址寄存器SI中的内容是源数据串的段内偏移地址，而变址寄存器DI中的内容是目标数据串的段内偏移地址。")]),_._v(" "),t("li",[_._v("源数据串的地址规定是数据段DS，目标数据串的段地址规定是附加段ES。指令执行后SI和DI的内容自动增量（或减量），增（或减）值为1或2。")])]),_._v(" "),t("hr"),_._v(" "),t("ol",{attrs:{start:"9"}},[t("li",[t("strong",[_._v("I/O端口寻址：")]),_._v("（独立编址）")])]),_._v(" "),t("ul",[t("li",[_._v("寻址输入输出设备的端口地址，可分为直接端口寻址和间接端口寻址。")]),_._v(" "),t("li",[_._v("直接端口寻址：由指令直接给出I/O设备的端口地址。它规定端口地址为8位，能寻址256个端口")]),_._v(" "),t("li",[_._v("间接端口寻址：由DX给出I/O设备的端口地址。由于DX是16位，因此间接端口地址能寻址多达64K个端口。")])]),_._v(" "),t("p",[_._v("例如：")]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("IN AL,20H;\t将地址为20H的外设内容读入AL中。\nOUT DX,AL;\tAL中内容输出给以DX的内容为地址的外设。\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br")])]),t("hr"),_._v(" "),t("ol",{attrs:{start:"10"}},[t("li",[t("strong",[_._v("隐含寻址：")])])]),_._v(" "),t("p",[_._v("指令隐含了的一个或两个操作数的地址，即操作数在默认的地址中。")]),_._v(" "),t("p",[_._v("例如：")]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("AAA;\t对AL中的内容进行十进制加法调整，并把调整后的结果放入AH和AL中。这条指令的隐含操作数是AH和AL。\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br")])]),t("h2",{attrs:{id:"_2-8086的指令系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-8086的指令系统"}},[_._v("#")]),_._v(" 2.8086的指令系统")]),_._v(" "),t("p",[_._v("指令系统包括九大类、133种基本指令，通过寻址方式的变化与数据形式（字节、字型）的组合，可构成上千条指令。指令系统按功能分为：数据传送类、算数运算类、逻辑运算与移位类、串操作类、控制转移类、处理机控制、输入输出、中断等。")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wfmiss/pictures/Principle_and_application_of_microcomputer/20210609231517.png",alt:""}})]),_._v(" "),t("hr"),_._v(" "),t("h3",{attrs:{id:"_2-1传送类指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1传送类指令"}},[_._v("#")]),_._v(" 2.1传送类指令")]),_._v(" "),t("h4",{attrs:{id:"_2-1-1数据传送指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1数据传送指令"}},[_._v("#")]),_._v(" 2.1.1数据传送指令")]),_._v(" "),t("p",[_._v("数据传送类指令实现CPU内部寄存器之间、CPU与内存储器之间、CPU与I/O端口之间的数据传送。")]),_._v(" "),t("p",[t("strong",[_._v("通用数据传送指令")])]),_._v(" "),t("p",[_._v("包括MOV、进栈（PUSH）、出栈指令（POP）、交换指令和换码指令。")]),_._v(" "),t("ul",[t("li",[_._v("一般数据传送指令MOV（8位/16位）")])]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("格式：MOV\tOP目的操作数,OP源操作数\n功能：OP源操作数 ——> OP目的操作数\n要求：OP目 可以是寄存器（除CS外）、存储器 OP源可以是寄存器、存储器和立即数。\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br")])]),t("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://cdn.jsdelivr.net/gh/wfmiss/pictures/Principle_and_application_of_microcomputer/20210609170714.png"}}),_._v(" "),t("p",[_._v("该指令有如下9种形式：")]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("MOV REG,REG\t\t\t;通用寄存器间传送\nMOV REG,IMM\t\t\t;立即数送通用寄存器\nMOV MEM,IMM\t\t\t;立即数送存储器\nMOV MEM,REG\t\t\t;通用寄存器送存储器\nMOV REG,MEM\t\t\t;存储器送通用寄存器\nMOV SEGREG,REG\t\t;通用寄存器送段寄存器（CS除外）\nMOV REG,SEGREG\t\t;段寄存器送通用寄存器（含CS）\nMOV SEGREG,MEM\t\t;存储器送通用寄存器（CS除外）\nMOV MEM,SEGREG\t\t;段寄存器送存储器（含CS）\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br"),t("span",{staticClass:"line-number"},[_._v("4")]),t("br"),t("span",{staticClass:"line-number"},[_._v("5")]),t("br"),t("span",{staticClass:"line-number"},[_._v("6")]),t("br"),t("span",{staticClass:"line-number"},[_._v("7")]),t("br"),t("span",{staticClass:"line-number"},[_._v("8")]),t("br"),t("span",{staticClass:"line-number"},[_._v("9")]),t("br")])]),t("p",[_._v("注意：")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("MOV指令的两个操作数（源、目的）均可采用不同的寻址方式。")])]),_._v(" "),t("li",[t("p",[_._v("源操作数和目的操作数的类型必须一致。")])]),_._v(" "),t("li",[t("p",[_._v("源和目的不能都是存储器操作数。")])]),_._v(" "),t("li",[t("p",[_._v("不允许把立即数做目的操作数，也不允许向段寄存器（CS、DS、SS、ES）送立即数。")])]),_._v(" "),t("li",[t("p",[_._v("不允许在段寄存器之间、存储单元之间传送数据。")])]),_._v(" "),t("li",[t("p",[_._v("CS、IP寄存器不能用作目的操作数。")])]),_._v(" "),t("li",[t("p",[_._v("一般传指令不影响标志位。")])])]),_._v(" "),t("hr"),_._v(" "),t("p",[t("strong",[_._v("堆栈操作指令")])]),_._v(" "),t("p",[_._v("堆栈：是按 “后进先出” 原则工作的一段存储区域。")]),_._v(" "),t("p",[_._v("堆栈寄存器SS —— 段地址")]),_._v(" "),t("p",[_._v("堆栈指针SP —— 始终单前栈顶所在的存储单元地址，即最新入栈数据所在存储单元的地址。")]),_._v(" "),t("p",[t("strong",[_._v("压栈操作(进栈指令)："),t("code",[_._v("PUSH OP(源操作数)")])])]),_._v(" "),t("p",[_._v("功能：把OP(源操作数)字节数据压入栈中，结果SP-2 ——> SP")]),_._v(" "),t("p",[_._v("原则：高字节压在高地址，低字节压在低地址")]),_._v(" "),t("p",[_._v("执行过程：")]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("SP <-- SP - 1;\t\t[SP] <-- OPH\nSP <-- SP - 1;\t\t[SP] <-- OPL\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br")])]),t("p",[_._v("堆栈操作总是对16位的数据进行，指令中目的操作数隐含为堆栈。进栈操作把数据传输到以SS为段基址、SP为偏移地址的栈中。其操作过程如下：")]),_._v(" "),t("ul",[t("li",[_._v("SP减一，指示堆栈中可以存放数据的位置，存放源操作数的高8位。")]),_._v(" "),t("li",[_._v("SP再减一，存源操作数的迪8位，完成进栈操作。")])]),_._v(" "),t("p",[t("strong",[_._v("出栈操作(出栈指令)："),t("code",[_._v("POP OP(目操作数)")])])]),_._v(" "),t("p",[_._v("功能：从栈中弹出数据 ——> OP(目操作数)，结果SP+2——>SP")]),_._v(" "),t("p",[_._v("执行过程：")]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("OPL <-- [SP];\t\tSP <—— SP+1\nOPH <-- [SP];\t\tSP <—— SP+1\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br")])]),t("p",[_._v("例如：")]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("已知：AX=1122H,BX=3344H,SP=1010H\n执行指令：PUSH AX\n\t\tPUSH BX\n\t\tPOP AX\n\t\tPOP BX\n执行后AX，BX，SP的结果？\n解：AX=3344H\n   BX=1122H\n   SP=1010H\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br"),t("span",{staticClass:"line-number"},[_._v("4")]),t("br"),t("span",{staticClass:"line-number"},[_._v("5")]),t("br"),t("span",{staticClass:"line-number"},[_._v("6")]),t("br"),t("span",{staticClass:"line-number"},[_._v("7")]),t("br"),t("span",{staticClass:"line-number"},[_._v("8")]),t("br"),t("span",{staticClass:"line-number"},[_._v("9")]),t("br")])]),t("p",[_._v("注意：")]),_._v(" "),t("ul",[t("li",[_._v("堆栈操作总是按字进行的。")]),_._v(" "),t("li",[_._v("压入指令，SP-2，数据在栈顶。弹出指令正好相反。")]),_._v(" "),t("li",[_._v("操作数可以是存储器、寄存器或段寄存器操作数 （CS不能用于POP），不能是立即数。")])]),_._v(" "),t("hr"),_._v(" "),t("h4",{attrs:{id:"_2-1-2目标地址传送指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2目标地址传送指令"}},[_._v("#")]),_._v(" 2.1.2目标地址传送指令")]),_._v(" "),t("p",[_._v("此类指令的功能是将操作数所在存储器的地址送入目标寄存器。")]),_._v(" "),t("p",[_._v("注意：")]),_._v(" "),t("ul",[t("li",[_._v("OP源必须是存储器操作数，OP目必须是16为的通用寄存器。")]),_._v(" "),t("li",[_._v("地址传输指令不影响状态标志位。")])]),_._v(" "),t("hr"),_._v(" "),t("p",[t("strong",[_._v("取有效地址指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("LEA 16位寄存器(OP目的操作数),源操作数偏移地址(OP源操作数)")])]),_._v(" "),t("p",[_._v("功能：存储器地址送到一个寄存器。")]),_._v(" "),t("p",[_._v("例如：")]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("LEA SI,[2040H]\n指令执行后，SI中的内容为2040H。又如：\nMOV SI,[2040H]\n指令执行后，SI中有偏移地址为2040H单元中的内容，而不是2040H这个值。\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br"),t("span",{staticClass:"line-number"},[_._v("4")]),t("br")])]),t("hr"),_._v(" "),t("p",[t("strong",[_._v("将地址指针装到DS和另一个寄存器的指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("LDS 16位寄存器(OP目的操作数),源操作数偏移地址(OP源操作数)")])]),_._v(" "),t("p",[_._v("功能：把OP源指定的4个字节内容取出，低地址的两个字节—>OP目，高地址的两个字节—>DS。")]),_._v(" "),t("p",[_._v("例如：")]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("LDS DI,[2130H]\n2130H和2131H的单元中的内容送到DI；\n2132H和2133H的单元中的内容送到DS；\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br")])]),t("hr"),_._v(" "),t("p",[t("strong",[_._v("将地址指针装到ES和另一个寄存器的指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("LES 16位寄存器(OP目的操作数),源操作数偏移地址(OP源操作数)")])]),_._v(" "),t("p",[_._v("功能：本指令与LDS指令的操作数基本相同，所不同的是将OP源4个字节中的高地址的两个字节—>ES。")]),_._v(" "),t("p",[_._v("例如：")]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("LES DI,[2130H]\n2130H和2131H的单元中的内容送到DI；\n2132H和2133H的单元中的内容送到ES；\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br")])]),t("hr"),_._v(" "),t("h4",{attrs:{id:"_2-1-3标志寄存器传送指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-3标志寄存器传送指令"}},[_._v("#")]),_._v(" 2.1.3标志寄存器传送指令")]),_._v(" "),t("p",[t("strong",[_._v("读取标志指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("LAHF ; AH <— 标志寄存器低八位")])]),_._v(" "),t("p",[_._v("特点：此指令操作结果不影响标志寄存器。")]),_._v(" "),t("hr"),_._v(" "),t("p",[t("strong",[_._v("设置标志指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("SAHF ; 标志寄存器低8位 <— AH")])]),_._v(" "),t("p",[_._v("特点：此之指令直接为标志寄存器的低8位赋值。")]),_._v(" "),t("hr"),_._v(" "),t("p",[t("strong",[_._v("对标志寄存器的堆栈操作指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("PUSHF ; 将标志寄存器的值压栈。")])]),_._v(" "),t("p",[_._v("​\t\t\t"),t("code",[_._v("POPF ; 从栈顶弹出一个字送标志寄存器。")])]),_._v(" "),t("p",[_._v("特点：")]),_._v(" "),t("ul",[t("li",[_._v("PUSHF不影响标志寄存器，而POPF直接为标志寄存器赋值。")]),_._v(" "),t("li",[_._v("通常两条指令成对出现，用来保护和恢复标志寄存器的内容。")])]),_._v(" "),t("hr"),_._v(" "),t("h4",{attrs:{id:"_2-1-4累加器专用传输指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-4累加器专用传输指令"}},[_._v("#")]),_._v(" 2.1.4累加器专用传输指令")]),_._v(" "),t("p",[t("strong",[_._v("数据交换指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("XCHG OP1(目的操作数),OP1(源操作数)")])]),_._v(" "),t("p",[_._v("功能：实现OP1和OP2的内容的相互交换。")]),_._v(" "),t("p",[_._v("操作数：通用寄存器或存储器，但不能均为内存单元。")]),_._v(" "),t("p",[_._v("注意：段寄存器和IP不能作为交换指令的操作数。")]),_._v(" "),t("hr"),_._v(" "),t("p",[t("strong",[_._v("换码指令（查表指令、翻译指令）")])]),_._v(" "),t("p",[_._v("换码指令是一条完成字节翻译功能的指令。它可以使累加器中的一个值变化为内存表格中的某一个值，一般用来实现编码制的转换。")]),_._v(" "),t("p",[_._v("格式：XLAT")]),_._v(" "),t("p",[_._v("功能：")]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("[BX+AL] —> AL\n\t|----\x3e EA\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br")])]),t("p",[_._v("说明：将BX和AL内容相加作为有效地址EA，在一个表格中找出此单元中的内容—>AL。")]),_._v(" "),t("p",[_._v("BX——表格的首地址")]),_._v(" "),t("p",[_._v("AL——相对于表格首地址的位移量（要装换的代码）")]),_._v(" "),t("p",[_._v("注意：")]),_._v(" "),t("ul",[t("li",[_._v("使用前，先建立被转换代码（字节型）的数据表。")]),_._v(" "),t("li",[_._v("换码指令只能使用寄存器BX、AL，不影响标志位。")])]),_._v(" "),t("hr"),_._v(" "),t("p",[t("strong",[_._v("输入指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("IN AL,n")])]),_._v(" "),t("p",[_._v("​\t\t\t"),t("code",[_._v("IN AX,n")])]),_._v(" "),t("p",[_._v("​\t\t\t"),t("code",[_._v("IN AL,DX")])]),_._v(" "),t("p",[_._v("​\t\t\t"),t("code",[_._v("IN AX,DX")])]),_._v(" "),t("p",[_._v("说明：以上四种指令格式分别是8位/16位端口地址组合形式；指令中n表示为8位端口地址（00H~FFH），此时地址线高8位默认为0；当端口地址为16位时，指令中采用寄存器间接寻址，应先将16位端口地址传输到DX中，然后DX中的地址在IN指令中间接寻址。")]),_._v(" "),t("hr"),_._v(" "),t("p",[t("strong",[_._v("输出指令")])]),_._v(" "),t("p",[t("strong",[_._v("输入指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("OUT n,AL")])]),_._v(" "),t("p",[_._v("​\t\t\t"),t("code",[_._v("OUT n,AX")])]),_._v(" "),t("p",[_._v("​\t\t\t"),t("code",[_._v("IN DX,AL")])]),_._v(" "),t("p",[_._v("​\t\t\t"),t("code",[_._v("IN DX,AX")])]),_._v(" "),t("p",[_._v("OUT指令除源操作数和目的操作数与IN指令相反外，其他相同。")]),_._v(" "),t("p",[_._v("可见，无论是输入指令还是输出指令，其中地址部分的寻址方式要么是直接寻址，要么是寄存器寻址。")]),_._v(" "),t("h3",{attrs:{id:"_2-2算数运算类指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2算数运算类指令"}},[_._v("#")]),_._v(" 2.2算数运算类指令")]),_._v(" "),t("p",[_._v("8086的算数运算类指令能够对二进制或十进制（BCD码）数进行加、减、乘、除运算，操作数的数据形式可以是8位或16位的无符号数或带符号数。")]),_._v(" "),t("h4",{attrs:{id:"_2-2-1加法指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1加法指令"}},[_._v("#")]),_._v(" 2.2.1加法指令")]),_._v(" "),t("p",[t("strong",[_._v("不带进位的加法指令：")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("ADD OP目,OP源")])]),_._v(" "),t("p",[_._v("功能：OP目<— OP源+OP目，根据结果设置标志位（FR）。")]),_._v(" "),t("p",[_._v("注意：两操作数的类型相同，类型明确，不能同为存储器操作数。")]),_._v(" "),t("p",[t("strong",[_._v("进位的加法指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("ADC OP目,OP源")])]),_._v(" "),t("p",[_._v("功能：OP目<—OP源+OP目+CF，置标志位")]),_._v(" "),t("p",[_._v("说明：只要用于多字节运算，多字节运算时低位字节产生进位应加到高位。")]),_._v(" "),t("p",[t("strong",[_._v("加1指令")])]),_._v(" "),t("p",[_._v("格式：INC OP")]),_._v(" "),t("p",[_._v("功能：OP <— OP+1")]),_._v(" "),t("p",[_._v("说明：常用于修改偏移地址和计数次数。操作数可以是8/16位通用寄存器操作数，不能为立即数。")]),_._v(" "),t("p",[_._v("注意：")]),_._v(" "),t("ul",[t("li",[_._v("INC指令不影响CF位，影响标志位AF、OF、PF、SF和ZF。")]),_._v(" "),t("li",[_._v("操作数视为无符号数。")])]),_._v(" "),t("p",[_._v("总结：以上三条指令运算结果将影响状态标志位，但INC不影响标志CF。")]),_._v(" "),t("h4",{attrs:{id:"_2-2-2减法指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2减法指令"}},[_._v("#")]),_._v(" 2.2.2减法指令")]),_._v(" "),t("p",[t("strong",[_._v("不带借位的减法指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("SUB OP目,OP源")])]),_._v(" "),t("p",[_._v("功能：OP目<— OP目-OP源，并根据结果设置标志")]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[_._v("指令的目的操作数不能是立即寻址；")]),_._v(" "),t("li",[_._v("减法操作中产生的借位进入CF标志；")]),_._v(" "),t("li",[_._v("无符号操作数相减，若CF=1，则结果为补码；")]),_._v(" "),t("li",[_._v("带符号操作数相减要考虑溢出。")])]),_._v(" "),t("p",[t("strong",[_._v("带借位的减法指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("SBB OP目,OP源")])]),_._v(" "),t("p",[_._v("功能：OP目<—OP目-OP源-DF，并根据结果设置标志。")]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[_._v("主要用于多字节或多精度数据相减的运算。")]),_._v(" "),t("li",[_._v("指令中有3个操作数，其中CF是本指令执行前的状态；")]),_._v(" "),t("li",[_._v("本指令在需要完成多字节数（如4字节的32位数或更多字节）相减时时使用；")]),_._v(" "),t("li",[_._v("指令的目的操作数不能是立即寻址（立即数）；")]),_._v(" "),t("li",[_._v("无符号操作数相减，若CF=1，则结果为补码；")]),_._v(" "),t("li",[_._v("带符号操作数相减要考虑溢出。")])]),_._v(" "),t("p",[t("strong",[_._v("减1指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("DEC OP目")])]),_._v(" "),t("p",[_._v("功能：OP目<—OP目-1，根据结果置标志位，不影响CF。")]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[_._v("操作数不能是立即寻址；")]),_._v(" "),t("li",[_._v("该指令不影响CF标志；")]),_._v(" "),t("li",[_._v("操作数为内存寻址时，需使用伪指令。")])]),_._v(" "),t("p",[t("strong",[_._v("取补指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("NEG OP")])]),_._v(" "),t("p",[_._v("功能：0-OP—>OP,将操作数取补后回送原操作数OP可以是8/16位通用寄存器和存储寄存器操作数，不能为立即数。")]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("对80H或8000H取补时，操作数没有变化，但OF=1。")])]),_._v(" "),t("li",[t("p",[_._v("对CF影响较特殊，只要操作数不是0，总是使CF=1。")])]),_._v(" "),t("li",[t("p",[_._v("操作数不能是立即寻址。")])])]),_._v(" "),t("p",[t("strong",[_._v("比较指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("CMP OP目,OP源")])]),_._v(" "),t("p",[_._v("功能：OP目-OP源，不回送结果，只根据结果置标志位。")]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[_._v("执行指令执行“目的操作数-源操作数”，与SUB指令不同的是，不产生运算结果，仅影响标志位；")]),_._v(" "),t("li",[_._v("指令的目的操作数不能是立即寻址；")]),_._v(" "),t("li",[_._v("目的操作数和源操作数不能同时为存储器操作数。")])]),_._v(" "),t("p",[_._v("用途：用于比较两个数的大小，可作为条件转移指令转移的条件。")]),_._v(" "),t("h4",{attrs:{id:"_2-2-3乘法指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3乘法指令"}},[_._v("#")]),_._v(" 2.2.3乘法指令")]),_._v(" "),t("p",[t("strong",[_._v("无符号数乘法")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("MUL OP")])]),_._v(" "),t("p",[_._v("功能："),t("code",[_._v("AX<—AL*OP")]),_._v("，8位数乘法")]),_._v(" "),t("p",[_._v("​\t\t\t"),t("code",[_._v("(DX、AX)<— AX*OP")]),_._v("，16位数乘法")]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[t("code",[_._v("8位*8位=>16位，16位*16位=>32位")])]),_._v(" "),t("li",[_._v("乘数和被乘数都不能为立即寻址；")]),_._v(" "),t("li",[_._v("乘数或被乘数必须放在AL或AX中，在指令中隐含；")]),_._v(" "),t("li",[_._v("16位运算结果在AX中，32位运算结果在DX（高16位）和AX（低16位）中。")])]),_._v(" "),t("p",[t("strong",[_._v("带符号数乘法")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("IMUL OP")])]),_._v(" "),t("p",[_._v("功能：操作同上，但是操作数为带符号数")]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[t("p",[t("code",[_._v("8位*8位=>16位，16位*16位=>32位")])])]),_._v(" "),t("li",[t("p",[_._v("乘数和被乘数都不能为立即寻址；")])]),_._v(" "),t("li",[t("p",[_._v("乘数或被乘数必须放在AL或AX中，在指令中隐含；")])]),_._v(" "),t("li",[t("p",[_._v("16位运算结果在AX中，32位运算结果在DX（高16位）和AX（低16位）中。")])]),_._v(" "),t("li",[t("p",[_._v("有符号数在计算机中是其补码，且符号位也参加运算，此时用MUL指令就得不到正确结果，IMUL指令则会将符号部分和数值部分分别进行处理。")])])]),_._v(" "),t("p",[t("strong",[_._v("注意：")])]),_._v(" "),t("p",[_._v("(1）进行字节运算时，OP目必须是AL，乘积在AX中；进行字运算时，0P目必须是AX，乘积在DX、AX中。源操作数不允许使用立即数寻址方式。\n(2）运算结果只影响CF、OF，其他的无定义。\n(3）对于MUL，若字节型数据相乘之积AH=0或字数据相乘之积DX=0，则CF=OF=0，否则CF=OF=1；\n对于IMUL指令，若字节数据相乘之积AH或字数据相乘之积DX的内容是低一半的符号扩展，则CF=OF=0, 否则CF=OF=1。")]),_._v(" "),t("p",[_._v("例题：")]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("已知AL=0FEH\n视为无符号数254，视为带符号数，值为-2\nBH=0AH\n视为无符号数为10，视为带符号数，数值为+10。\n执行指令MUL BH后 AX=09ECH，CF=OF=1\n执行指令IMUL BH后AX=FFECH，CF=OF=0\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br"),t("span",{staticClass:"line-number"},[_._v("4")]),t("br"),t("span",{staticClass:"line-number"},[_._v("5")]),t("br"),t("span",{staticClass:"line-number"},[_._v("6")]),t("br")])]),t("h4",{attrs:{id:"_2-2-4除法指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-4除法指令"}},[_._v("#")]),_._v(" 2.2.4除法指令")]),_._v(" "),t("p",[t("strong",[_._v("指令要求被除数是除数的双倍字长，即当除数是8/16位时，要求被除数是16/32位的二进制数。")])]),_._v(" "),t("p",[t("strong",[_._v("无符号数除数")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("DIV OP")])]),_._v(" "),t("p",[_._v("功能：")]),_._v(" "),t("ul",[t("li",[_._v("字节除法：AX/OP—>AL=商，AH=余数")]),_._v(" "),t("li",[_._v("字出除法：（DX、AX）/OP—>AX=商，DX=余数")])]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[_._v("指令中使用16位除8位，32位除16位的格式，被除数不够16位或32位，则需要扩展；")]),_._v(" "),t("li",[_._v("被除数、除数都不能为立即寻址，除数必须是寄存器数或存储器寻址；")]),_._v(" "),t("li",[_._v("被除数必须放在AX或DX:AX中，在指令中则隐含；")]),_._v(" "),t("li",[_._v("16位运算的商放在AL中，在余数放在AH中；")]),_._v(" "),t("li",[_._v("32位运算的商放在AX中，余数放在DX中。")])]),_._v(" "),t("p",[t("strong",[_._v("带符号除数")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("IDIV OP")])]),_._v(" "),t("p",[_._v("功能：操作同DIV，但是操作数作为符号数。")]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[_._v("同DIV")])]),_._v(" "),t("p",[_._v("注意：")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("当除数是字节时，被除数必须放在AX中，")]),_._v(" "),t("p",[_._v("当除数是子时，被除数必须放在DX，AX中。")])]),_._v(" "),t("li",[t("p",[_._v("商超出规定的范围时，将产生0号中断。")])]),_._v(" "),t("li",[t("p",[_._v("IDIV运算结果余数的符号与被除数相同。")])]),_._v(" "),t("li",[t("p",[_._v("带符号数除法运算中，当被除数位数不够时，则需将被除数扩展到所需的位数。（8086/8088设有带符号数扩展指令）")])])]),_._v(" "),t("p",[t("strong",[_._v("符号扩张指令格式")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("CBW")])]),_._v(" "),t("p",[_._v("功能；将AL中的数的符号位扩展AH")]),_._v(" "),t("p",[_._v("规则：")]),_._v(" "),t("ul",[t("li",[_._v("若最高位=1，则执行后AH=FFH")]),_._v(" "),t("li",[_._v("若最高位=0，则执行后AH=00H")])]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[_._v("在符号除法指令中，被除数要扩展成16位时使用该指令")])]),_._v(" "),t("p",[t("strong",[_._v("字节扩展指令（16位—>32位）")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("CWD")])]),_._v(" "),t("p",[_._v("功能：将AX中的数的符号位扩展到DX")]),_._v(" "),t("p",[_._v("规则：")]),_._v(" "),t("ul",[t("li",[_._v("若最高位=1，则执行后DX=FFFFH")]),_._v(" "),t("li",[_._v("若最高位=0，则执行后DX=0000H")])]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[_._v("在符号除法指令中，被除数要扩展成32位时使用该指令")])]),_._v(" "),t("p",[_._v("这两条指令不影响标志位。")]),_._v(" "),t("h3",{attrs:{id:"_2-3十进制运算调整指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3十进制运算调整指令"}},[_._v("#")]),_._v(" 2.3十进制运算调整指令")]),_._v(" "),t("h4",{attrs:{id:"_2-3-1加法调整指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1加法调整指令"}},[_._v("#")]),_._v(" 2.3.1加法调整指令")]),_._v(" "),t("p",[t("strong",[_._v("对非组合BCD数加法操作进行校正AAA")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("AAA")])]),_._v(" "),t("p",[_._v("功能：对AL寄存器的内容进行十进制数调整。")]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[_._v("要求参加操作的数必须是非组合BCD数；")]),_._v(" "),t("li",[_._v("该指令用在非压缩BCD数加法操作后，操作数隐含在AL中；")]),_._v(" "),t("li",[_._v("由于该调整指令使用AH寄存器，故应先将AH内容清零。")])]),_._v(" "),t("p",[_._v("AAA指令调整方法：")]),_._v(" "),t("ol",[t("li",[t("p",[_._v("如果AL寄存器指令的低4位在0~9之间，AF为0，则跳过第2步执行第3步；")])]),_._v(" "),t("li",[t("p",[_._v("如果AL寄存器的低4位在0AH~0FH之间或AF为1，则AL寄存器的内容加06H，同时AH寄存器内容加1，且将AF置1；")])]),_._v(" "),t("li",[t("p",[_._v("AL寄存器的高4位清零；")])]),_._v(" "),t("li",[t("p",[_._v("AF位的值送CF。")])])]),_._v(" "),t("p",[t("strong",[_._v("对组合BCD数加法操作的结果进行校正DAA")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("DAA")])]),_._v(" "),t("p",[_._v("功能：对AL中的由两个组合BCD码相加进行调整，将结果（组合BCD码）存于AL中。")]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[_._v("要求参加操作的数必须是BCD数；")]),_._v(" "),t("li",[_._v("该指令用在组合BCD数加法操作后，操作数隐含在AL中。")])]),_._v(" "),t("p",[_._v("DAA指令调整方法：")]),_._v(" "),t("ul",[t("li",[_._v("调整方法与AAA类似，只是此指令要分别考虑AL的高4位和低4位。")]),_._v(" "),t("li",[_._v("若AL低四位大于9或AF=1，则AL+6—>AL，置AF=1；")]),_._v(" "),t("li",[_._v("若AL高四位大于9或CF=1，则AL+60H—>AL，置CF=1")])]),_._v(" "),t("p",[_._v("注意：以上两条指令使用时必须紧跟在ADD或ADC之后。")]),_._v(" "),t("h4",{attrs:{id:"_2-3-2减法调整指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2减法调整指令"}},[_._v("#")]),_._v(" 2.3.2减法调整指令")]),_._v(" "),t("p",[t("strong",[_._v("非组合BCD码的减法调整指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("AAS")]),_._v("\n功能：对AL中由两个非组合BCD码相减的差进行调整，将结果（非组合BCD码）存于AL中。\n调整过程：调整方法与AAA类似，不同的是当AL的低4位表示的数大于9或AF=1时，将AL-6--AL, AH-1\n一AH，并将AF和CF置1，清除AL的高四位。")]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[_._v("参加操作的数必须是非组合BCD数；")]),_._v(" "),t("li",[_._v("该指令用在非组合BCD数操作之后，操作数隐含在AL中；")]),_._v(" "),t("li",[_._v("由于该调整指令使用到AH寄存器，故先将AH内容清零。")])]),_._v(" "),t("p",[_._v("AAS指令调整方法：")]),_._v(" "),t("ol",[t("li",[t("p",[_._v("如果AL寄存器指令的低4位在0~9之间，AF为0，则跳过第2步执行第3步；")])]),_._v(" "),t("li",[t("p",[_._v("如果AL寄存器的低4位在0AH~0FH之间或AF为1，则AL寄存器的内容减06H，同时AH寄存器内容减1，且将AF置1；")])]),_._v(" "),t("li",[t("p",[_._v("AL寄存器的高4位清零；")])]),_._v(" "),t("li",[t("p",[_._v("AF位的值送CF。")])])]),_._v(" "),t("p",[t("strong",[_._v("组合BCD码的减法调整指令")]),_._v("\n格式："),t("code",[_._v("DAS")]),_._v("\n功能：对AL中由两个组合BCD码相减所得的结果进行调整，并将结果（组合BCD码）存于AL中。\n调整过程：调整方法与DAA类似，不同的是当AL的低4位大于9或者 AF=1，则AL-6 一>AL，并置AF=1；而当 AL的高4位大于9或者 CF=1时，则AL-60H—>AL，并置CF=1。")]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[_._v("参加操作的数必须是组合BCD数；")]),_._v(" "),t("li",[_._v("该指令用在组合BCD数减法操作之后，操作数隐含在AL中。")])]),_._v(" "),t("p",[_._v("注意：使用AAS、DAS指令必须紧跟在减法指令之后。")]),_._v(" "),t("h4",{attrs:{id:"_2-3-3乘法调整指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-3乘法调整指令"}},[_._v("#")]),_._v(" 2.3.3乘法调整指令")]),_._v(" "),t("p",[t("strong",[_._v("非组合BCD码的乘法调整指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("AAM")])]),_._v(" "),t("p",[_._v("功能：对AX中的由两个非组合BCD码相乘所得的结果进行调整，并将调整后的结果存于AX中。")]),_._v(" "),t("p",[_._v("调整过程：AH<—AL/0AH（商），AL<—AL%0AH（余数）")]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[_._v("参加操作的数必须是非组合BCD数，该指令在MUL指令之后；")]),_._v(" "),t("li",[_._v("AAM指令调整方法：因为两个非组合BCD数相乘的结果为0~81，不会到十进制数的百位，因此调整方法就是将AL寄存器的内容除以0AH，商放在AH寄存器（与除法指令不同）中，表示转换的十位整数；余数放在AL寄存器（与除法指令不同）中，表示转换的个位数。")])]),_._v(" "),t("p",[_._v("注意：本指令必须紧跟在MUL指令之后使用。")]),_._v(" "),t("h4",{attrs:{id:"_2-3-4除法调整指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-4除法调整指令"}},[_._v("#")]),_._v(" 2.3.4除法调整指令")]),_._v(" "),t("p",[t("strong",[_._v("非组合BCD码的除法调整指令")]),_._v("\n格式："),t("code",[_._v("AAD")])]),_._v(" "),t("p",[_._v("功能：把AX中的两个非组合BCD码进行调整，然后可用DIV指令实现两个非组合BCD码的除法运算")]),_._v(" "),t("p",[_._v("调整过程："),t("code",[_._v("AL<—10*AH+AL, AH<—0")]),_._v("\n注意：本指令必须在DIV运算前使用。")]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[_._v("该操作数要满足16位除8位的除法操作做要求，即非组合BCD数需放在AX寄存器中，")]),_._v(" "),t("li",[_._v("该指令用在DIV指令之前，先调整，后做除法操作。")])]),_._v(" "),t("p",[_._v("AAD指令调整方法：将AX中的非组合BCD数转换成二进制数，因为除数也是非组合BCD数，必须在0~9之间，实质是完成二进制数除法。")]),_._v(" "),t("h4",{attrs:{id:"_2-3-5总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-5总结"}},[_._v("#")]),_._v(" 2.3.5总结")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("DAA或DAS必须用在ADD (ADC)或SUB (SBB)之后，结果对OF无影响，对其他状态标志位均有影响。")])]),_._v(" "),t("li",[t("p",[_._v("AAA或AAS必须用在ADD (ADC)或SUB (SBB)之后，结果影响AF和CF，对其他标志位均无意义。")])]),_._v(" "),t("li",[t("p",[_._v("AAM必须用在MUL之后，结果影响SF、ZF和PF，对AF、CF和OF无影响。")])]),_._v(" "),t("li",[t("p",[_._v("AAD必须用在DIV之前，结果影响SF、ZF和PF，对AF、CF和OF无影响。")])])]),_._v(" "),t("h3",{attrs:{id:"_2-4位操作指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4位操作指令"}},[_._v("#")]),_._v(" 2.4位操作指令")]),_._v(" "),t("p",[_._v("位操作指令的共同特点如下：")]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("- 可以按二进制位进行操作。\n- 逻辑运算指令按逻辑门电路的运算规则。\n- 逻辑位移指令有左移和右移，移出的位都进入CF标志。\n- 因移空位的补充方式不同，有多种指令形式。\n- 逻辑移位指令中，移动超过1次，则用CL寄存器作为计数器。\n- 执行逻辑操作指令，CF均被清零。\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br"),t("span",{staticClass:"line-number"},[_._v("4")]),t("br"),t("span",{staticClass:"line-number"},[_._v("5")]),t("br"),t("span",{staticClass:"line-number"},[_._v("6")]),t("br")])]),t("p",[_._v("OP源：8/16位通用寄存器、存储器操作数或立即数")]),_._v(" "),t("p",[_._v("OP目：通用寄存器和存储器操作数。")]),_._v(" "),t("p",[_._v("除 “非” 运算外其余指令都会使OF=CF=0")]),_._v(" "),t("h4",{attrs:{id:"_2-4-1逻辑运算指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-1逻辑运算指令"}},[_._v("#")]),_._v(" 2.4.1逻辑运算指令")]),_._v(" "),t("p",[t("strong",[_._v("逻辑与运算指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("AND OP目,OP源")])]),_._v(" "),t("p",[_._v("功能：将8/16位寄存器或存储器内容和源操作数 进行“与”运算。")]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[_._v("目的操作数不能为立即寻址；")]),_._v(" "),t("li",[_._v("可由源操作数控制，对8/16位数的某些位进行屏蔽或保留。")])]),_._v(" "),t("hr"),_._v(" "),t("p",[t("strong",[_._v("逻辑或运算指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("OR OP目,OP源")])]),_._v(" "),t("p",[_._v("功能：对两个操作数进行或运算，结果回送到OP目。")]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[_._v("目的操作数不能为立即寻址；")]),_._v(" "),t("li",[_._v("可用于组合某个字，或将某些位进行置1或保留。")])]),_._v(" "),t("p",[_._v("例：")]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("将AL中的非组合BCD码转换为ASCII码。\nOR AL,30H\n非组合BCD码：00H~09H（0~9）\nASSCII码：  30H~39H（‘0’~‘9’）\n0000 1001\n0011 0000\n----------\n0011 1001 39H\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br"),t("span",{staticClass:"line-number"},[_._v("4")]),t("br"),t("span",{staticClass:"line-number"},[_._v("5")]),t("br"),t("span",{staticClass:"line-number"},[_._v("6")]),t("br"),t("span",{staticClass:"line-number"},[_._v("7")]),t("br"),t("span",{staticClass:"line-number"},[_._v("8")]),t("br")])]),t("hr"),_._v(" "),t("p",[t("strong",[_._v("逻辑异或运算指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("XOR OP目,OP源")])]),_._v(" "),t("p",[_._v("功能：对于两个操作数进行异或运算，结果回送到OP目。")]),_._v(" "),t("p",[_._v("说明：用于对某个二进制数按位取反或对某寄存器清0。")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("相同为零，不同为1")])]),_._v(" "),t("li",[t("p",[_._v("和1异或，相当于取反")])]),_._v(" "),t("li",[t("p",[_._v("和0异或，相当于不变")])])]),_._v(" "),t("p",[_._v("例：")]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("寄存器清0（有4条指令可达到AX清0目的）：\nXOP AL,AL\t;AL清0\nMOV AX,0\t;移位指令不影响CF\nSUB AX,AX\nAND AX,0\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br"),t("span",{staticClass:"line-number"},[_._v("4")]),t("br"),t("span",{staticClass:"line-number"},[_._v("5")]),t("br")])]),t("hr"),_._v(" "),t("p",[t("strong",[_._v("逻辑求反指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("NOT OP目")])]),_._v(" "),t("p",[_._v("功能：对操作数逐位取反后回送到原处。")]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[_._v("该指令只是执行求反操作，而不是求反码指令，对符号位也求反；")]),_._v(" "),t("li",[_._v("不影响标志位。")]),_._v(" "),t("li",[_._v("对8/16位一次性全部取反。")])]),_._v(" "),t("hr"),_._v(" "),t("p",[t("strong",[_._v("测试指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("TEST OP目,OP源")])]),_._v(" "),t("p",[_._v("功能：将OP目与OP源进行 “与” 运算，不回送结果，只根据结果置标志位。")]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[_._v("主要用来检测目的操作数的某些位是1或0，根据测试结果，决定转向。")]),_._v(" "),t("li",[_._v("目的操作数不能为立即寻址；")]),_._v(" "),t("li",[_._v("TEST指令和AND指令的运行规则相同，但TEST指令不产生运算结果，仅影响状态标志；")]),_._v(" "),t("li",[_._v("常用于对某位是“1”或“0”的检测。")])]),_._v(" "),t("hr"),_._v(" "),t("p",[t("strong",[_._v("总结")])]),_._v(" "),t("ul",[t("li",[_._v("AND、OR、XOR、TEST均影响标志，CF=0，OF=0，而PF，SF，ZF由结果而定，AF无意义。 此指令可用来清CF，常用与拆字，拼字。")]),_._v(" "),t("li",[_._v("NOT不影响标志。")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wfmiss/pictures//Principle_and_application_of_microcomputer/20210617125826.png",alt:""}})]),_._v(" "),t("hr"),_._v(" "),t("h4",{attrs:{id:"_2-4-2逻辑移位指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-2逻辑移位指令"}},[_._v("#")]),_._v(" 2.4.2逻辑移位指令")]),_._v(" "),t("p",[_._v("位移操作：")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("非循环移位")]),_._v(" "),t("ul",[t("li",[_._v("逻辑移位")]),_._v(" "),t("li",[_._v("算数移位")])])]),_._v(" "),t("li",[t("p",[_._v("循环移位")]),_._v(" "),t("ul",[t("li",[_._v("不带进位位的移位")]),_._v(" "),t("li",[_._v("带进位位的移位")])])])]),_._v(" "),t("p",[_._v("规定：移动一位时由指令中的计数值直接给出；位移两位及以上，则位移次数由CL指定，即必须将移位位数N事先装入CL中。")]),_._v(" "),t("hr"),_._v(" "),t("h5",{attrs:{id:"非循环位移指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#非循环位移指令"}},[_._v("#")]),_._v(" -非循环位移指令")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wfmiss/pictures/Principle_and_application_of_microcomputer/20210617130329.png",alt:""}})]),_._v(" "),t("ul",[t("li",[_._v("算数左移与逻辑左移相同，可用于无符号数乘2操作；")]),_._v(" "),t("li",[_._v("逻辑右移可用于无符号数除2操作；")]),_._v(" "),t("li",[_._v("算数右移可以用于有符号数除2操作。")]),_._v(" "),t("li",[_._v("算数逻辑位移指令是双操作数指令，操作数可以是立即数之外的任何寻址方式；当计数值大于1时，必须使用CL作计数器。")])]),_._v(" "),t("hr"),_._v(" "),t("p",[t("strong",[_._v("逻辑左移指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("SHL 目的操作数,1")])]),_._v(" "),t("p",[_._v("​\t\t\t"),t("code",[_._v("SHL 目的操作数,CL")])]),_._v(" "),t("p",[_._v("功能：将8/16位寄存器或存储器内容左移，移空的位补0.")]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[_._v("使用逻辑左移指令移动1位时，源操作数为1；左移位数超过1位时，用CL寄存器控制移动次数；")]),_._v(" "),t("li",[_._v("逻辑左移指令移动1位，则原数据乘2（在无进位的情况下）。")])]),_._v(" "),t("hr"),_._v(" "),t("p",[t("strong",[_._v("算数左移指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("SAL 目的操作数,1")])]),_._v(" "),t("p",[_._v("​\t\t\t"),t("code",[_._v("SAL 目的操作数,CL")])]),_._v(" "),t("p",[_._v("功能：将8/16位寄存器或存储器内容左移，移空的位补0。")]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[_._v("使用算数左移指令移动1位时，源操作数为1；")]),_._v(" "),t("li",[_._v("使用算数左移指令超过1位时，用CL寄存器控制移动次数；算数左移指令移动1位，则原数据乘2（在无进位视的情况下）")]),_._v(" "),t("li",[_._v("算数左移指令和逻辑左移指令功能相同。")])]),_._v(" "),t("hr"),_._v(" "),t("p",[t("strong",[_._v("逻辑右移指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("SHR 目的操作数,1")])]),_._v(" "),t("p",[_._v("​\t\t\t"),t("code",[_._v("SHR 目的操作数,CL")])]),_._v(" "),t("p",[_._v("功能：将8/16位寄存器或存储器内容右移，移空的位补0。")]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[_._v("使用逻辑右移指令移动1位时，源操作数为1；")]),_._v(" "),t("li",[_._v("使用逻辑右移指令移动超过1位时，用CL寄存器控制移动次数；逻辑右移指令移动1位，则原数据除2（与除法指令有差别）。")])]),_._v(" "),t("hr"),_._v(" "),t("p",[t("strong",[_._v("算数逻辑右移指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("SAR 目的操作数,1")])]),_._v(" "),t("p",[_._v("​\t\t\t"),t("code",[_._v("SAR 目的操作数，CL")])]),_._v(" "),t("p",[_._v("功能：将8/16位寄存器或存储器内容右移，移空的位由目的操作数的最高位补充。")]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[_._v("使用算数右移指令1位时，源操作数为1；")]),_._v(" "),t("li",[_._v("使用算数右移指令超过1位时，用CL寄存器控制移动次数；算数右移指令实质上补充的是符号位。")])]),_._v(" "),t("hr"),_._v(" "),t("h5",{attrs:{id:"不带进位循环移位指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不带进位循环移位指令"}},[_._v("#")]),_._v(" -不带进位循环移位指令")]),_._v(" "),t("p",[t("strong",[_._v("循环左移指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("ROL 目的操作数,1")])]),_._v(" "),t("p",[_._v("​\t\t\t"),t("code",[_._v("ROL 目的操作数,CL")])]),_._v(" "),t("p",[_._v("功能：将8/16位寄存器或存储器内容左移，移空的位由移出位补充。")]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[_._v("使用不带进位循环左移指令移动1位时，源操作数为1；")]),_._v(" "),t("li",[_._v("使用不带进位循环左移指令移动超过1位时，用CL寄存器控制移动次数。")])]),_._v(" "),t("p",[t("strong",[_._v("循环右移指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("ROR 目的操作数,1")])]),_._v(" "),t("p",[_._v("​\t\t\t"),t("code",[_._v("ROR 目的操作数,CL")])]),_._v(" "),t("p",[_._v("功能：将8/16位寄存器或存储器内容右移，移空的位由移出位补充。")]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[_._v("使用不带进位循环右移指令移动1位时，源操作数为1；")]),_._v(" "),t("li",[_._v("使用不带进位循环右移指令移动超过1位时，用CL寄存器控制移动次数。")])]),_._v(" "),t("hr"),_._v(" "),t("h5",{attrs:{id:"带进位循环位移指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#带进位循环位移指令"}},[_._v("#")]),_._v(" -带进位循环位移指令")]),_._v(" "),t("p",[t("strong",[_._v("循环左移移指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("RCL 目的操作数,1")])]),_._v(" "),t("p",[_._v("​\t\t\t"),t("code",[_._v("RCL 目的操作数,CL")])]),_._v(" "),t("p",[_._v("功能：将8/16位寄存器或存储器内容左移，移空的位由CF位补充。")]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[_._v("使用带进位循环左移指令移动1位时，源操作数为1；")]),_._v(" "),t("li",[_._v("使用带进位循环左移指令移动超过1位时，用CL寄存器控制移动次数。")]),_._v(" "),t("li",[_._v("该指令执行前，若CF没有置“1”或清“0”，则第一次移位时，移空位CF中的随机数补充。")])]),_._v(" "),t("p",[t("strong",[_._v("循环右移移指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("RCR 目的操作数,1")])]),_._v(" "),t("p",[_._v("​\t\t\t"),t("code",[_._v("RCR 目的操作数,CL")])]),_._v(" "),t("p",[_._v("功能：将8/16位寄存器或存储器内容右移，移空的位由CF位补充。")]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[_._v("使用带进位循环右移指令移动1位时，源操作数为1；")]),_._v(" "),t("li",[_._v("使用带进位循环右移指令移动超过1位时，用CL寄存器控制移动次数。")]),_._v(" "),t("li",[_._v("该指令执行前，若CF没有置”1“或清”0“，则第一次移位时，移空位由CF中的随机数补充。")])]),_._v(" "),t("hr"),_._v(" "),t("h3",{attrs:{id:"_2-5串操作指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5串操作指令"}},[_._v("#")]),_._v(" 2.5串操作指令")]),_._v(" "),t("p",[_._v("串操作指令实现一对字符或数据的操作，分为基本串操作指令和重复前缀指令。基本串操作指令每执行一次只能处理一个数据，与重复前缀指令结合可以处理一串数据。")]),_._v(" "),t("p",[_._v("申处理指令是针对存储器操作，其共同点如下：")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("源串一般存放在数据段（DS），偏移地址由SI指定，目标串在附加段（ES），偏移地址由DI指定。")])]),_._v(" "),t("li",[t("p",[_._v("指令有特珠的寻址方式，规定源操作数的逻辑地址由"),t("code",[_._v("DS:SI")]),_._v("给出，目的操作数的逻辑地址由"),t("code",[_._v("ES:DI")]),_._v(" 给出。")])]),_._v(" "),t("li",[t("p",[_._v("由于存储单元有字型数据和字节型数据，指令的助记符则有B或 W之分。")])]),_._v(" "),t("li",[t("p",[_._v("每执行一次串操作后自动修改指针SI、DI。若方向标志DF=0，则每次操作后SI和DI自动加1（或加2）；若DF=1，则每次操作后SI和DI自动减1（或减2）。")])]),_._v(" "),t("li",[t("p",[_._v("使用这类指令，存储单元的地址指针是自动移动的，由 DF 标志控制指针的移动方向，DF=0，地址往增加方向移动；DF=1，地址往减小方向移动。")])]),_._v(" "),t("li",[t("p",[_._v("串长（字或字节个数）存放在CX中。")])]),_._v(" "),t("li",[t("p",[_._v("串的长度由 CX 给定。")])]),_._v(" "),t("li",[t("p",[_._v("这类指令前一般可以使用指令前缀。")])]),_._v(" "),t("li",[t("p",[_._v("这类指令后不带操作数，操作数在此指令前给定。")])])]),_._v(" "),t("p",[_._v("串处理指令中需要注意的问题：")]),_._v(" "),t("ul",[t("li",[_._v("在执行指令前必须DS、ES、SI、DI、DF、CX置好需要的值，它们是串操作指令的隐含操作数。")])]),_._v(" "),t("ul",[t("li",[_._v("当串指令在同段之间执行传送或比较等操作时，应将DS 和ES 取同样的值。")]),_._v(" "),t("li",[_._v("当使开指令前缀进行重复操作时，CX 的值是指数据个数，不是存储单元的字节数。")]),_._v(" "),t("li",[_._v("当使用 DF=1， 即地址指针为减小方向移动时，源操作数和目的操作数的初始地址要正确设定。")])]),_._v(" "),t("hr"),_._v(" "),t("h4",{attrs:{id:"_2-5-1串传送指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-1串传送指令"}},[_._v("#")]),_._v(" 2.5.1串传送指令")]),_._v(" "),t("p",[t("strong",[_._v("串传送指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("MOVSB")]),_._v("——字节传送")]),_._v(" "),t("p",[_._v("​\t\t\t"),t("code",[_._v("MOVSW")]),_._v("——字传送")]),_._v(" "),t("p",[_._v("功能：")]),_._v(" "),t("ul",[t("li",[_._v("目的操作数 <一 源操作数。")]),_._v(" "),t("li",[_._v("把位于数据段由SI指定的内存单元的字节/字数据传送到附加段由DI指定的内存单元，指令不影响状态标志位。")])]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[_._v("源操作数地址由 DS:SI指定，目的操作数由 ES:DI指定;")]),_._v(" "),t("li",[_._v("指令执行时，由DF标志控制SI和 DI是增大还是减小；")]),_._v(" "),t("li",[_._v("由指令中的B和W控制 SI 和DI 是加1/加2，还是减1/减2；")]),_._v(" "),t("li",[_._v("指令执行一次，CX 奇存器的内容不改变。")]),_._v(" "),t("li",[_._v("串传送指令常与无条件重复前缀连用。")])]),_._v(" "),t("p",[_._v("过程：")]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("[DI]<--[SI] 若DF=0 SI<--SI+1/2,DI<--DI+1/2\n[DI]<--[SI] 若DF=1 SI<--SI-1/2,DI<--DI-1/2\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br")])]),t("hr"),_._v(" "),t("h4",{attrs:{id:"_2-5-2串比较指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-2串比较指令"}},[_._v("#")]),_._v(" 2.5.2串比较指令")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("CMPSB")]),_._v("——字节比较")]),_._v(" "),t("p",[_._v("​\t\t\t"),t("code",[_._v("CMPSW")]),_._v("——字比较")]),_._v(" "),t("p",[_._v("功能：")]),_._v(" "),t("ul",[t("li",[_._v("目的操作数 一 源操作数。")]),_._v(" "),t("li",[_._v("把位于数据段由SI指定的字节/字数据与附加段由DI指定的字节数进行比较，结果不保存，但应响状态标志位，并由DF状态决定SI、DI的修改方向。")])]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[_._v("执行指令完成内存中两串数据对应元素的减法操作，但不产生运算结果，仅影响状态标志；")]),_._v(" "),t("li",[_._v("其余与串传送指令相同；")]),_._v(" "),t("li",[_._v("该指令多与其他指令或指令前缀配合。")]),_._v(" "),t("li",[_._v("串比较指令常与条件重复前缀连用，指令的执行不改变操作数，仅影响标志位。")])]),_._v(" "),t("p",[_._v("过程：")]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("[SI]-[DI] SI<--SI(+/-)1/2,DI<--DI(+/-)1/2\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br")])]),t("hr"),_._v(" "),t("h4",{attrs:{id:"_2-5-3串搜索指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-3串搜索指令"}},[_._v("#")]),_._v(" 2.5.3串搜索指令")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("SCASB")]),_._v("——字节搜索")]),_._v(" "),t("p",[_._v("​\t\t\t"),t("code",[_._v("SCASW")]),_._v("——字搜索")]),_._v(" "),t("p",[_._v("功能：把AL/AX中的内容与附加段由DI指定的一个字节/字数据进行比较，结果不保存，但影响状态标志位，并由DF状态决定DI的修改方向。")]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[_._v("执行该指令前，将需检索的数据存入AL或AX寄存器中；")]),_._v(" "),t("li",[_._v("指令完成内存数据串中每个元素的搜索操作，即AL/AX减串元素；")]),_._v(" "),t("li",[_._v("该指令多与其他指令或指令前缀配合；")]),_._v(" "),t("li",[_._v("其余与串传输指令相同。")])]),_._v(" "),t("p",[_._v("过程：")]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("字节——AL-[DI],DI<--DI(+/-)1\n  字——AX-[DI],DI<--DI(+/-)2\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br")])]),t("h4",{attrs:{id:"_2-5-4串装入指令-取字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-4串装入指令-取字符串"}},[_._v("#")]),_._v(" 2.5.4串装入指令（取字符串）")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("LODSB")])]),_._v(" "),t("p",[_._v("​\t\t\t"),t("code",[_._v("LODSW")])]),_._v(" "),t("p",[_._v("功能：")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("AL/AX <— 源操作数")])]),_._v(" "),t("li",[t("p",[_._v("把位于数据段由SI指定内存单元的内容取到AL或AX中，并修改SI的内容，指向下一字节/字单元。")])])]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[_._v("该指令每执行一次，将存储单元中的内容写入累加器；")]),_._v(" "),t("li",[_._v("该指令多与其他指令配合，但不能有指令前缀；")]),_._v(" "),t("li",[_._v("在软件循环中与其他指令配合，可完成复杂字符串的处理；")]),_._v(" "),t("li",[_._v("LODS指令的执行不影响标志位。")])]),_._v(" "),t("hr"),_._v(" "),t("h4",{attrs:{id:"_2-5-5串存储指令-存字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-5串存储指令-存字符串"}},[_._v("#")]),_._v(" 2.5.5串存储指令（存字符串）")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("STOSB")])]),_._v(" "),t("p",[_._v("​\t\t\t"),t("code",[_._v("STOSW")])]),_._v(" "),t("p",[_._v("功能：")]),_._v(" "),t("ul",[t("li",[_._v("目的操作数<— AL/AX")]),_._v(" "),t("li",[_._v("把寄存器AL或AX中的内容存到附加段由DI指定的内存单元，并修改DI的内容，指向下一字节/字的存放单元。")])]),_._v(" "),t("p",[_._v("说明：")]),_._v(" "),t("ul",[t("li",[_._v("该指令每执行一次，将累加器的内容写入存储单元中；")]),_._v(" "),t("li",[_._v("该指令可以有指令前缀")]),_._v(" "),t("li",[_._v("该指令的执行不影响标志位。")])]),_._v(" "),t("hr"),_._v(" "),t("h4",{attrs:{id:"_2-5-6重复前缀指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-6重复前缀指令"}},[_._v("#")]),_._v(" 2.5.6重复前缀指令")]),_._v(" "),t("p",[_._v("基本串操作指令每执行一次只能处理一个数据，与重复前缀指令结合可以处理一串数据。")]),_._v(" "),t("p",[t("strong",[_._v("无条件重复")])]),_._v(" "),t("p",[_._v("REP：")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("REP为重复前缀，每执行一次，CX内容减1，直到CX内容为0，才退出串处理过程，一般与MOVS指令和STOS指令配合使用。")])]),_._v(" "),t("li",[t("p",[_._v("若CX !=0，则CX<— CX-1 继续重复操作，知道CX=0为止。")])])]),_._v(" "),t("hr"),_._v(" "),t("p",[t("strong",[_._v("条件重复")])]),_._v(" "),t("ul",[t("li",[t("p",[_._v("（相等/为0）重复")]),_._v(" "),t("ul",[t("li",[_._v("REPE/REPZ\n"),t("ul",[t("li",[_._v("若CX !=0且ZF=1，则CX<— CX-1 继续重复操作，知道CX=0或ZF=0为止。")])])])])]),_._v(" "),t("li",[t("p",[_._v("（不相等/不为0）重复")]),_._v(" "),t("ul",[t("li",[_._v("REPNZ/REPNE\n"),t("ul",[t("li",[_._v("若CX !=0且ZF=0，则CX<— CX-1 继续重复操作，知道CX=0或ZF=1为止。")])])])])])]),_._v(" "),t("hr"),_._v(" "),t("p",[t("strong",[_._v("注意")])]),_._v(" "),t("ul",[t("li",[_._v("重复前缀指令不能单独使用，其后必须紧跟基本串操作指令，控制基本串操作指令重复执行。其执行过程相当于一个循环控制程序的运行。在每次重复之后，地址指针SI和DI都被修改，但指针IP仍保持指向带有前缀的串操作指令的地址。")]),_._v(" "),t("li",[_._v("重复执行次数由数据串长度决定，数据串长度应预置在寄存器CX中。")]),_._v(" "),t("li",[_._v("执行重复前缀指令不影响标志位。")])]),_._v(" "),t("hr"),_._v(" "),t("h3",{attrs:{id:"_2-6程序控制转移指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6程序控制转移指令"}},[_._v("#")]),_._v(" 2.6程序控制转移指令")]),_._v(" "),t("h4",{attrs:{id:"_2-6-1寻址方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-1寻址方式"}},[_._v("#")]),_._v(" 2.6.1寻址方式")]),_._v(" "),t("p",[_._v("控制转移指令在段内、段间转移时、使用直接（相对）寻址或间接寻址方式。")]),_._v(" "),t("p",[t("strong",[_._v("直接寻址方式")])]),_._v(" "),t("ul",[t("li",[t("p",[_._v("段内寻址方式：目标程序和源程序在同一程序段内，只给出源地址和目标地址的差值，此差值是偏移量，它是一个以IP为基准的8/16位的带符号补码数。")])]),_._v(" "),t("li",[t("p",[_._v("段间直接寻址方式：直接给出转移目标地址的段地址和段内位移量，用前者取代CS当前的值，用后者取代IP中当前的值，使程序从一个代码段转移到另一个代码段。")])])]),_._v(" "),t("hr"),_._v(" "),t("p",[t("strong",[_._v("间接寻址方式")])]),_._v(" "),t("ul",[t("li",[_._v("段内间接寻址方式：指令转移的有效地址存在一个寄存器或存储器单元中，用它取代单前IP的值，实现程序转移。")]),_._v(" "),t("li",[_._v("段间间接寻址方式：指令给出一个存储器地址，从该地址开始的4个字节单元中存放转移目标地址的段内偏移量和段地址，这两个地址在指令执行时用于取代当前的IP和CS的内容，使程序从一个代码段转移到另一个代码段。")])]),_._v(" "),t("h4",{attrs:{id:"_2-6-2转移指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-2转移指令"}},[_._v("#")]),_._v(" 2.6.2转移指令")]),_._v(" "),t("p",[_._v("通过修改指令的偏移地址或段地址及偏移地址实现程序的转移")]),_._v(" "),t("h5",{attrs:{id:"无条件转移指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#无条件转移指令"}},[_._v("#")]),_._v(" -无条件转移指令")]),_._v(" "),t("p",[_._v("无条件转移到目标地址，执行新的指令。")]),_._v(" "),t("p",[t("strong",[_._v("段内直接转移指令")])]),_._v(" "),t("p",[_._v("一个段内的直接无条件转移是在指令中给出一个相对位移量。该位移量是相对于IP奇存器来计算的，即有效转移地址是在IP当前的内容上加上一个8位或16位的位移量，所以也称为相对寻址。其位移量是带符号的数，这就使转移可在向前或向后的方向进行。")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("JMP NEAR PTR 目标地址")])]),_._v(" "),t("p",[_._v("补码：-32768～+32767")]),_._v(" "),t("p",[_._v("功能：当位移量为16位带符号数时，允许在（+/-）32KB 的范国内寻找目标地址，称为"),t("strong",[_._v("段内直接近转移")]),_._v("。")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("JMP NEAR SHORT 目标地址")])]),_._v(" "),t("p",[_._v("补码：-128～+127")]),_._v(" "),t("p",[_._v("功能：当位移量为8位带符号数时，允许在（+/-）127字节 的范国内寻找目标地址，称为"),t("strong",[_._v("段内直接短转移")]),_._v("。")]),_._v(" "),t("hr"),_._v(" "),t("p",[t("strong",[_._v("段内间接转移指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("JMP OP(寄存器)")])]),_._v(" "),t("p",[_._v("​\t\t\t"),t("code",[_._v("JMP WORD PTR [BX]")])]),_._v(" "),t("p",[_._v("功能：在JMP 指令中，间接给出转移目标地址，即由一个 16位奇存器或由存储单元寻址目标地址。")]),_._v(" "),t("hr"),_._v(" "),t("p",[t("strong",[_._v("段间直接转移指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("JMP FAR PTR 目标地址")])]),_._v(" "),t("p",[_._v("功能：段间转移意味着寄存器 CS 和IP的值都要改变，指令中直接采用汇编中的符号地址作为直接目标地址。")]),_._v(" "),t("hr"),_._v(" "),t("p",[t("strong",[_._v("段间间接转移指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("JMP WORD PTR [BX][SI]")])]),_._v(" "),t("p",[_._v("功能：段间转移意味着寄存器 CS 和IP 的值都要改变，所以间接给出目标地址，只能由存储单元寻址。也就是说，目标地址存放在连续的4个存储单元中，低字节两个单元的内容代替IP，高字节两个单元的内容代替CS。")]),_._v(" "),t("hr"),_._v(" "),t("p",[t("strong",[_._v("注意：")])]),_._v(" "),t("ul",[t("li",[_._v("当目标地址高于源地址时称为正向转移，偏移量是正数；")]),_._v(" "),t("li",[_._v("当目标地址低于原地址时称为反向转移，偏移量是负数。")])]),_._v(" "),t("h5",{attrs:{id:"有条件转移指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#有条件转移指令"}},[_._v("#")]),_._v(" -有条件转移指令")]),_._v(" "),t("p",[_._v("在具备一定条件的情况下转移到目标地址。")]),_._v(" "),t("ul",[t("li",[_._v("条件转移指令将前一条指令执行结果对状态标志位的影响，作为程序转移的条件。满足条件时转移到指令指定的地址，否则将顺序执行下条指令。可作为判断条件的状态标志位有CF、PF、ZF、SF和OF。")]),_._v(" "),t("li",[_._v("条件转移指令都是采用相对寻址方式的双字节指令，指令第一字节是操作码，第二字节是带符号的位移量。条件转移指令只能在当前段中实现短转移，不影响状态标志位。")])]),_._v(" "),t("hr"),_._v(" "),t("p",[t("strong",[_._v("对无符号数")])]),_._v(" "),t("ul",[t("li",[t("p",[t("code",[_._v("JA/JNBE 目标标号 ——高于/不低于也不等于转移，CF AND ZF=0")])])]),_._v(" "),t("li",[t("p",[t("code",[_._v("JAE/JNB 目标标号 ——高于或等于/不低于转移，CF=0 OR ZF=1")])])]),_._v(" "),t("li",[t("p",[t("code",[_._v("JB/JNAE 目标标号 ——低于/不高于也不等于，CF=1 AND ZF=0")])])]),_._v(" "),t("li",[t("p",[t("code",[_._v("JBE/JNA 目标标号 ——低于或等于/不高于，CF=1 OR ZF=1")])])])]),_._v(" "),t("div",{staticClass:"language-text line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("J ---\x3eJMP\nA ---\x3e大于\nB ---\x3e小于\nE ---\x3e等于\nN ---\x3eNOT\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br"),t("span",{staticClass:"line-number"},[_._v("4")]),t("br"),t("span",{staticClass:"line-number"},[_._v("5")]),t("br")])]),t("hr"),_._v(" "),t("p",[t("strong",[_._v("对有符号数")])]),_._v(" "),t("ul",[t("li",[t("code",[_._v("JG/JNLE 目标标号 ——大于/不小于也不等于转移，（SF ⊕ OF） AND ZF=0")])]),_._v(" "),t("li",[t("code",[_._v("JGE/JNL 目标标号 ——大于或等于/不小于转移，SF ⊕ OF=0")])]),_._v(" "),t("li",[t("code",[_._v("JL/JNGE 目标标号 ——小于/不大于也不等于转移，SF ⊕ OF=1")])]),_._v(" "),t("li",[t("code",[_._v("JLE/JNG 目标标号 ——小于或等于/不大于转移，（SF ⊕ OF）= 1 OR ZF=1")])])]),_._v(" "),t("div",{staticClass:"language-text line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("G ---\x3e大于\nL ---\x3e小于\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br")])]),t("hr"),_._v(" "),t("p",[t("strong",[_._v("对标志位")])]),_._v(" "),t("ul",[t("li",[t("code",[_._v("JC 目标标号 ——进位位为1转移，CF=1")])]),_._v(" "),t("li",[t("code",[_._v("JNC 目标标号 ——进位位为0转移，CF=0")])]),_._v(" "),t("li",[t("code",[_._v("JE/JZ 目标标号 ——等于/结果为0转移，ZF=1")])]),_._v(" "),t("li",[t("code",[_._v("JNE/JNZ 目标标号 ——不等于/结果不为0转移，ZF=0")])]),_._v(" "),t("li",[t("code",[_._v("JO 目标标号 ——溢出转移，OF=1")])]),_._v(" "),t("li",[t("code",[_._v("JNO 目标标号 ——不溢出转移，OF=0")])]),_._v(" "),t("li",[t("code",[_._v("JNP/JNO 目标标号 ——奇偶位为0/奇偶性为奇转移，PF=0")])]),_._v(" "),t("li",[t("code",[_._v("JP/JO 目标标号 ——奇偶位为1/奇偶性为偶转移，PF=1")])]),_._v(" "),t("li",[t("code",[_._v("JNS 目标标号 ——符号标志位为0转移，SF=0")])]),_._v(" "),t("li",[t("code",[_._v("JS 目标标号 ——符号标志位为1转移，SF=1")])])]),_._v(" "),t("h4",{attrs:{id:"_2-6-3调用和返回指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-3调用和返回指令"}},[_._v("#")]),_._v(" 2.6.3调用和返回指令")]),_._v(" "),t("h5",{attrs:{id:"调用指令call"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#调用指令call"}},[_._v("#")]),_._v(" 调用指令CALL")]),_._v(" "),t("p",[_._v("为了程确保程序正确返回，CALL指令的类型必须与RET指令的类型相匹配。")]),_._v(" "),t("p",[_._v("CALL指令有两种的得到目标地址的方法：直接寻址和间接寻址。直接寻址意味着目标地址在CALL指令的操作码部分直接给出。间接寻址意味着目标地址在指定的寄存器或内存单元中，以间接方式给出。")]),_._v(" "),t("p",[_._v("一个过程用于段内调用，则在过程定义中属性应为NEAR。而另一个过程用于段间调用，则在过程定义中属性应为FAR。")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("CALL OP")])]),_._v(" "),t("p",[_._v("功能：将CALL指令的下一条指令的地址（断点地址IP【段内】或IP与CS【段间】）压栈，新的目标地址（子程序首地址）装入IP或CS中，控制程序转移到由OP指明入口的子程序。其中OP为子程序（过程）的名字。")]),_._v(" "),t("p",[t("strong",[_._v("段内直接调用")])]),_._v(" "),t("p",[_._v("子过程与原调用程序在同一代码段，在调用之前需要保护断点的偏移地址。")]),_._v(" "),t("p",[t("code",[_._v("CALL NEAR 目标地址")])]),_._v(" "),t("p",[t("strong",[_._v("段内间接调用")])]),_._v(" "),t("p",[_._v("例如：")]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("CALL WORD PTR [SI]\nCALL BX\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br")])]),t("p",[t("strong",[_._v("段间直接调用")])]),_._v(" "),t("p",[_._v("子过程与原程序调用程序不在同一代码段，在调用之前需保护断点的段基址和偏移地址。")]),_._v(" "),t("p",[_._v("先将断点的CS压栈，再压入IP。")]),_._v(" "),t("p",[t("code",[_._v("CALL FAR 目标地址")])]),_._v(" "),t("p",[t("strong",[_._v("段间间接调用")])]),_._v(" "),t("p",[_._v("例如：")]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("CALL WORD PTR [SI]\nCALL BX\nCALL WORD PRT 62[BX][DI]\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br")])]),t("hr"),_._v(" "),t("h5",{attrs:{id:"返回指令ret"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#返回指令ret"}},[_._v("#")]),_._v(" 返回指令RET")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("RET")])]),_._v(" "),t("p",[_._v("功能：通常作为一个子程序的最后一条指令，用以返回到调用子程序的断点处，即从堆栈弹出断点送IP和CS。")]),_._v(" "),t("p",[_._v("操作过程：")]),_._v(" "),t("ul",[t("li",[_._v("1.从栈顶弹出一个字给IP，SP+2 -> SP")]),_._v(" "),t("li",[_._v("2.从栈顶弹出一个字给CS，SP+2 -> SP")]),_._v(" "),t("li",[_._v("对于段内调用只有（1）。")])]),_._v(" "),t("hr"),_._v(" "),t("h4",{attrs:{id:"_2-6-4循环控制指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-4循环控制指令"}},[_._v("#")]),_._v(" 2.6.4循环控制指令")]),_._v(" "),t("ul",[t("li",[_._v("使用循环控制指令之前，必须在CX（计数器）中预置循环次数的初值。")]),_._v(" "),t("li",[_._v("不影响状态标志位。")]),_._v(" "),t("li",[_._v("主要用于数据块比较、查找关键字等操作。")])]),_._v(" "),t("h5",{attrs:{id:"计数循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#计数循环"}},[_._v("#")]),_._v(" 计数循环")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("LOOP 目标标号")])]),_._v(" "),t("p",[_._v("功能：CX-1 —> CX，若CX!=0，循环转移到目标标号，直到CX=0退出循环。")]),_._v(" "),t("h5",{attrs:{id:"结果为0-相等循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#结果为0-相等循环"}},[_._v("#")]),_._v(" 结果为0/相等循环")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("LOOP/LOOPE 目标标号")])]),_._v(" "),t("p",[_._v("功能：CX-1 —> CX，若CX!=0且ZF=1时，循环转移到目标标号，直到CX=0或ZF=0退出循环。")]),_._v(" "),t("h5",{attrs:{id:"结果不为0-不相等循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#结果不为0-不相等循环"}},[_._v("#")]),_._v(" 结果不为0/不相等循环")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("LOOPNZ/LOOPNE 目标标号")])]),_._v(" "),t("p",[_._v("功能：CX-1—> CX，若CX!=0且ZF=0时，循环转移到目标标号，直到CX=0或ZF=0时退出循环")]),_._v(" "),t("h5",{attrs:{id:"计数为0转移"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#计数为0转移"}},[_._v("#")]),_._v(" 计数为0转移")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("JCXZ 目标标号")])]),_._v(" "),t("p",[_._v("功能：若CX=0时，则转向目标标号，否则顺序执行。")]),_._v(" "),t("h3",{attrs:{id:"_2-7处理器控制指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-7处理器控制指令"}},[_._v("#")]),_._v(" 2.7处理器控制指令")]),_._v(" "),t("h4",{attrs:{id:"_2-7-1标志操作指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-1标志操作指令"}},[_._v("#")]),_._v(" 2.7.1标志操作指令")]),_._v(" "),t("p",[_._v("格式：")]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("CLC\t\t清除进位标志，置CF=0\nCTC\t\t置1进位标志，置CF=1\nCMC\t\t取反进位标志，置CF=!CF\nCLD\t\t清楚方向标志，置DF=0\nSTD\t\t置1方向标志，置DF=1\nCLI\t\t清楚中断标志，置IF=0\nSTI\t\t置1中断标志，置IF=1\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br"),t("span",{staticClass:"line-number"},[_._v("4")]),t("br"),t("span",{staticClass:"line-number"},[_._v("5")]),t("br"),t("span",{staticClass:"line-number"},[_._v("6")]),t("br"),t("span",{staticClass:"line-number"},[_._v("7")]),t("br")])]),t("p",[_._v("这些操作指令完成对标志位的置位、复位等操作，这些指令只影响与其相关的标志位。")]),_._v(" "),t("h4",{attrs:{id:"_2-7-2-cpu控制指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-2-cpu控制指令"}},[_._v("#")]),_._v(" 2.7.2 CPU控制指令")]),_._v(" "),t("h5",{attrs:{id:"处理器暂停指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#处理器暂停指令"}},[_._v("#")]),_._v(" 处理器暂停指令")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("HLT")])]),_._v(" "),t("p",[_._v("功能：使处理器处于暂时停机状态。")]),_._v(" "),t("p",[_._v("说明：HLT引起的暂停，只有RESET（复位）、NMI（非屏蔽中断请求）信号可以使CPU退出暂停状态。")]),_._v(" "),t("h5",{attrs:{id:"处理器等待指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#处理器等待指令"}},[_._v("#")]),_._v(" 处理器等待指令")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("WAIT")])]),_._v(" "),t("p",[_._v("功能：执行WAIT指令之后，处理器处于等待状态，直到检测到"),t("span",{staticStyle:{"text-decoration":"overline"}},[_._v("TEST")]),_._v("引脚有效，才能退出等待状态，执行后续指令。")]),_._v(" "),t("p",[_._v("说明：用于处理器与外设同步。")]),_._v(" "),t("h5",{attrs:{id:"处理器交权指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#处理器交权指令"}},[_._v("#")]),_._v(" 处理器交权指令")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("ESC EXTOPCD,OP源")]),_._v("(其中EXTOPCSD为外部操作码，OP源为操作数)")]),_._v(" "),t("p",[_._v("功能：用来为协处理器提供提供一个操作码和操作数，以便完成主机对协处理器的某种操作要求。")]),_._v(" "),t("h5",{attrs:{id:"空操作指令-延时"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#空操作指令-延时"}},[_._v("#")]),_._v(" 空操作指令（延时）")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("NOP")])]),_._v(" "),t("p",[_._v("功能：在执行本指令期间，CPU不完成任何操作，只是每一条NOP指令，耗费3个时钟周期的时间。")]),_._v(" "),t("p",[t("strong",[_._v("总线封锁指令")])]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("LOCK")])]),_._v(" "),t("p",[_._v("功能：在CPU访问存储器或外设时，总线控制器会对总线进行封锁，使其他处理器得不到总线控制权，从而就不能访问存储器或外设。")]),_._v(" "),t("p",[_._v("说明：LOCK指令可以放在任何一条指令前，所以LOCK指令实际上是一个特殊的1字节封锁线。它使工作在最大模式下的8086CPU，在执行下一条指令期间发出总线封锁信号，即LOCK引脚变为低电平有效信号。")]),_._v(" "),t("h3",{attrs:{id:"_2-8输入输出指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-8输入输出指令"}},[_._v("#")]),_._v(" 2.8输入输出指令")]),_._v(" "),t("p",[_._v("CPU对外设端口有两种寻址方式，即直接寻址和间接寻址。直接寻址范围为0000H~0FFFFH共64K个端口。间接寻址时，只能用DX作间址寄存器。")]),_._v(" "),t("h4",{attrs:{id:"输入指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#输入指令"}},[_._v("#")]),_._v(" 输入指令")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("IN 累加器,端口")])]),_._v(" "),t("p",[_._v("功能：把一个字节/字由输入端口传送到AL/AX中。")]),_._v(" "),t("h4",{attrs:{id:"输出指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#输出指令"}},[_._v("#")]),_._v(" 输出指令")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("OUT 端口,累加器")])]),_._v(" "),t("p",[_._v("功能：把AX中的16位数或AL中的8位数输出到指定端口。")]),_._v(" "),t("h3",{attrs:{id:"_2-9中断指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-9中断指令"}},[_._v("#")]),_._v(" 2.9中断指令")]),_._v(" "),t("h4",{attrs:{id:"_2-9-1溢出中断指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-9-1溢出中断指令"}},[_._v("#")]),_._v(" 2.9.1溢出中断指令")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("INTO")])]),_._v(" "),t("p",[_._v("功能：检测OF标志位。当OF=1时，产生一个中断类型4的中断；当OF=0时，本指令不起作用。")]),_._v(" "),t("p",[_._v("注意：影响标志位IF、TF。")]),_._v(" "),t("h4",{attrs:{id:"_2-9-2软中断指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-9-2软中断指令"}},[_._v("#")]),_._v(" 2.9.2软中断指令")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("INT n")]),_._v("（n为中断类型信号）")]),_._v(" "),t("p",[_._v("功能：产生一个软件中断，把控制转向一个类型型号为n的软中断。")]),_._v(" "),t("p",[_._v("注意：")]),_._v(" "),t("ul",[t("li",[_._v("影响标志位IF、TF。")]),_._v(" "),t("li",[_._v("n为中断类型信号（起到索引的作用），可以是常数或常数表达式，其值在0~255的范围内。")])]),_._v(" "),t("h4",{attrs:{id:"_2-9-3中断返回指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-9-3中断返回指令"}},[_._v("#")]),_._v(" 2.9.3中断返回指令")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("IRET")])]),_._v(" "),t("p",[_._v("功能：让CPU执行完中断服务程序后，正确返回原程序的断点处。")]),_._v(" "),t("p",[_._v("注意：影响所有标志位。")]),_._v(" "),t("h2",{attrs:{id:"_3-常用伪指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-常用伪指令"}},[_._v("#")]),_._v(" 3.常用伪指令")]),_._v(" "),t("h3",{attrs:{id:"_3-1宏汇编语言的基本语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1宏汇编语言的基本语法"}},[_._v("#")]),_._v(" 3.1宏汇编语言的基本语法")]),_._v(" "),t("h4",{attrs:{id:"_3-1-1常数、变量和标号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1常数、变量和标号"}},[_._v("#")]),_._v(" 3.1.1常数、变量和标号")]),_._v(" "),t("p",[t("strong",[_._v("常数")])]),_._v(" "),t("p",[_._v("没有任何属性的纯数值。在汇编期间，它的值已经完全确定，而且在程序的运行中也不会发生变换。它可以有以下几种类型：")]),_._v(" "),t("ul",[t("li",[_._v("二进制数：以字母B结尾的一串“0”和“1”组成的序列。")]),_._v(" "),t("li",[_._v("八进制数：以字母o或Q结尾，由若干个0到7的数字组成的序列。")]),_._v(" "),t("li",[_._v("十进制数：由若干个0到9的纯数字组成的序列，可以以字母D结尾，也可以省略字母D。")]),_._v(" "),t("li",[_._v("十六进制数：以字母H结尾，由若干个0到9的数字和字母A到F组成的序列，且必须以数字开头。")]),_._v(" "),t("li",[_._v("字符串常数：用引号括起来的一个或多个字符。这些字符以ASCII码形式存在内存中。")])]),_._v(" "),t("p",[_._v("注意：为了区别A~F组成的一个字符串是十六进制数还是英文符号，规定在前面冠以数字“0”。")]),_._v(" "),t("p",[_._v("总之，常数主要以立即数、位移量的形式出现在指令语句或数据定义的伪指令中。")]),_._v(" "),t("hr"),_._v(" "),t("p",[t("strong",[_._v("变量")])]),_._v(" "),t("p",[_._v("变量：通常是存放在某些存储单元的数据，这些数据在程序运行期间可以修改。")]),_._v(" "),t("p",[_._v("变量名：表示数据在段中的有效地址，由用户指定。变量名是可选的，如果使用变量名，它代表数据区中第一个数据项的地址。")]),_._v(" "),t("p",[_._v("变量的三个属性：")]),_._v(" "),t("ul",[t("li",[_._v("段属性（SEGMENT）：表示变量所在段首地址")]),_._v(" "),t("li",[_._v("偏移属性（OFFSET）：表示变量的偏移地址")]),_._v(" "),t("li",[_._v("类型属性（TYPE）：表示变量占用存储单元的字节数。\n"),t("ul",[t("li",[_._v("类型：字节（DB）、字（DW）、双字（DD）、四字、十字节类型，变量是用数据定义伪指令DB，DW，DD等定义的。")])])])]),_._v(" "),t("p",[_._v("注意：变量也可以定义为一个数据区或存储区，但变量名仅表示该数据区域的第一个数据单元（即数据区或存储区的首地址）。")]),_._v(" "),t("hr"),_._v(" "),t("p",[t("strong",[_._v("标号")])]),_._v(" "),t("ul",[t("li",[_._v("表示一条指令所在的地址，也是指令语句的地址符号，常用作转移指令（包含子程序调用指令）的操作数，即目标地址。")]),_._v(" "),t("li",[_._v("通常由字母数字串组成但第一个字符必须为字母。最多允许使用31个字符，且可以使用下划线，使标号容易阅读。")])]),_._v(" "),t("p",[_._v("标号的三个属性：")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("段属性（SEGMENT）：表示标号所在的段基址")])]),_._v(" "),t("li",[t("p",[_._v("偏移属性（OFFSET）：表示标号的偏移地址")])]),_._v(" "),t("li",[t("p",[_._v("距离属性（类型属性TYPE）：表示标号作为段内或段间的转移属性")])])]),_._v(" "),t("p",[_._v("距离属性分为两种：")]),_._v(" "),t("p",[_._v("NEAR（近）：表示标号只能被所在段内的转移和调用使用指令访问（即段内转移）。")]),_._v(" "),t("p",[_._v("FAR（远）：表示本标号可以被其他段（不是标号所在段）的转移和调用指令访问（即段间转移）。")]),_._v(" "),t("h4",{attrs:{id:"_3-1-2运算符号与表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2运算符号与表达式"}},[_._v("#")]),_._v(" 3.1.2运算符号与表达式")]),_._v(" "),t("p",[_._v("表达式：")]),_._v(" "),t("ul",[t("li",[_._v("数值表达式：只产生数值结果")]),_._v(" "),t("li",[_._v("地址表达式：产生的结果是一个存储器地址，若该地址存放的是数据，一般称它为变量，若存放的是指令，一般称它为标号。")])]),_._v(" "),t("p",[_._v("运算符主要包括一下6种类型：")]),_._v(" "),t("p",[t("strong",[_._v("1.算数运算符")])]),_._v(" "),t("p",[_._v("包括："),t("code",[_._v("+、-、*、/、MOD(求余)、SHL(左余)")])]),_._v(" "),t("p",[t("strong",[_._v("2.逻辑运算符")])]),_._v(" "),t("p",[_._v("包括："),t("code",[_._v("AND、OR、XOR、NOT")]),_._v("。只适用于对常数进行逻辑运算。")]),_._v(" "),t("p",[t("strong",[_._v("3.关系运算符")])]),_._v(" "),t("p",[_._v("包括："),t("code",[_._v("EQ(相等)、NE(不相等)、LT(小于)、GT(大于)、LE(小于或等于)、GE(大于或等于)")])]),_._v(" "),t("p",[_._v("结果：")]),_._v(" "),t("ul",[t("li",[_._v("若关系为假（不成立），结果为0；")]),_._v(" "),t("li",[_._v("若关系为真（成立），结果为0FFH或0FFFFH。")])]),_._v(" "),t("p",[t("strong",[_._v("4.分析操作符")]),_._v("（数值返回运算符）")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("取地址的偏移量")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("OFFSET 变量名或标号")])]),_._v(" "),t("p",[_._v("功能：取变量名或标号所在的段内偏移量。")])]),_._v(" "),t("li",[t("p",[_._v("取段基址")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("SEG 变量名或标号")])]),_._v(" "),t("p",[_._v("功能：取变量名或标号所在的段首地址。")])]),_._v(" "),t("li",[t("p",[_._v("求变量名或标号的类型值")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("TYPE 变量名或标号")])]),_._v(" "),t("p",[_._v("功能：放回一个数字值。若TYPE加在变量名前，返回该变量的类型属性；若加在标号前，返回该变量的距离属性。")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"center"}}),_._v(" "),t("th",{staticStyle:{"text-align":"center"}},[_._v("属性")]),_._v(" "),t("th",{staticStyle:{"text-align":"center"}},[_._v("类型值")])])]),_._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"center"}},[_._v("变量")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("BYTE")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("1")])]),_._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[_._v("变量")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("WORD")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("2")])]),_._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[_._v("变量")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("WORD")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("4")])]),_._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[_._v("标号")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("NEAR")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("-1")])]),_._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[_._v("标号")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("FAR")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("-2")])])])])]),_._v(" "),t("li",[t("p",[_._v("求长度")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("LENDTH 变量名")])]),_._v(" "),t("p",[_._v("功能：返回一个变量名所占存储单元（字节、字或双字）的数目。若变量是用重复定义子句说明的，则返回DUP前面的数值；其余返回1。")])]),_._v(" "),t("li",[t("p",[_._v("求大小")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("SIZE 变量名")])]),_._v(" "),t("p",[_._v("功能：返回变量名所占将存储单元的字节数，它等于LENGTH和TYPE两个运算符返回的乘积。")])])]),_._v(" "),t("p",[t("strong",[_._v("5.综合运算符")])]),_._v(" "),t("ul",[t("li",[t("p",[_._v("PTR运算符")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("类型 PTR 表达式")])]),_._v(" "),t("p",[_._v("功能：用于指出变量、标号或地址表达式的类型属性，新的类型只在当前指令内有效。")])]),_._v(" "),t("li",[t("p",[_._v("THIS运算符")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("THIS 类型")])]),_._v(" "),t("p",[_._v("功能：把它后面指定的类型或距离属性赋给当前的变量、标号或地址表达式。")])])]),_._v(" "),t("p",[_._v("注：THIS使下面的原标号或原变量有新的名字和类型，但不分配新的存储单元。")]),_._v(" "),t("p",[t("strong",[_._v("6.其他运算符")])]),_._v(" "),t("ul",[t("li",[t("p",[_._v("HIGH和LOW运算符")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("HIGH 表达式")]),_._v("、"),t("code",[_._v("LOW表达式")])]),_._v(" "),t("p",[_._v("功能：从运算对象中分离出高字节或低字节。")])]),_._v(" "),t("li",[t("p",[_._v("SHORT运算符")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("SHORT 标号")])]),_._v(" "),t("p",[_._v("功能：当转移的目标地址与本转移指令的下一条指令之间的字节距离在-128~127范围时，可以使用SHORT运算符进行说明。")])])]),_._v(" "),t("h3",{attrs:{id:"_3-2伪指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2伪指令"}},[_._v("#")]),_._v(" 3.2伪指令")]),_._v(" "),t("p",[_._v("8086宏汇编语言有两种类型的语句：")]),_._v(" "),t("p",[_._v("指令语句：在汇编过程中被翻译成相应的目标代码，经连接后生成可执行的机器指令代码。")]),_._v(" "),t("p",[_._v("伪指令语句：（指示性语句）在汇编时被解释执行，由汇编程序来处理的一类操作，如数据定义，分配存储器等。")]),_._v(" "),t("h4",{attrs:{id:"_3-2-1伪指令语句的格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1伪指令语句的格式"}},[_._v("#")]),_._v(" 3.2.1伪指令语句的格式")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("符号名 定义符 操作数;注释")])]),_._v(" "),t("h4",{attrs:{id:"_5-2-2常用伪指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-2常用伪指令"}},[_._v("#")]),_._v(" 5.2.2常用伪指令")]),_._v(" "),t("p",[_._v("1.符号定义伪指令（赋值语句）")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("等值伪指令")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("符号名 EQU 表达式")])]),_._v(" "),t("p",[_._v("功能：将表达式的值赋给符号名。")]),_._v(" "),t("p",[_._v("注意：符号名一旦被"),t("code",[_._v("EQU")]),_._v("定义，就不能再赋值，即不能用"),t("code",[_._v("EQU")]),_._v("再为符号名重新赋值。")])]),_._v(" "),t("li",[t("p",[_._v("等号伪指令")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("符号名 = 表达式")])]),_._v(" "),t("p",[_._v("功能：将表达式的值赋给符号名。")]),_._v(" "),t("p",[_._v("说明：可以在程序中不同的地方多次使用以重新为符号名赋值。")])]),_._v(" "),t("li",[t("p",[_._v("定义符号名伪指令")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("符号名 LABEL 类型")])]),_._v(" "),t("p",[_._v("功能：定义一个标号或变量，并指定其类型。")])])]),_._v(" "),t("hr"),_._v(" "),t("p",[_._v("2.数据定义伪指令")]),_._v(" "),t("p",[_._v("格式：")]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("[变量名] DR 表达式 ; 定义字节\n[变量名] DW 表达式 ; 定义字\n[变量名] DD 表达式 ; 定义双字\n[变量名] DQ 表达式 ; 定义8个字节\n[变量名] DT 表达式 ; 定义10个字节\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br"),t("span",{staticClass:"line-number"},[_._v("4")]),t("br"),t("span",{staticClass:"line-number"},[_._v("5")]),t("br")])]),t("p",[_._v("表达式——是赋给变量的初始值，可以有一个，也可以有多个，常见的有以下几种：")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("数值表达式：")]),_._v(" "),t("p",[_._v("实际上是为数据分配存储单元，并把变量名作为该存储单元的名称。若要定义多个相同类型的数据，可用逗号把这些数据隔开，并依次分配在相邻的存储单元。")])]),_._v(" "),t("li",[t("p",[_._v("ASCII字符串")]),_._v(" "),t("p",[_._v("字符串必须用引号括起来，并且不超过256个字符，它们在内存中按地址递增顺序自左向右依次存放再付的ASCII码。")])]),_._v(" "),t("li",[t("p",[_._v("？——为数据项分配存储单元的一种方法，只是存储单元中不预置确定的值，常用来预留存储储单元，存放程序的中间结果或最终结果。")])]),_._v(" "),t("li",[t("p",[_._v("重复定义子句DUP——可以为若干个重复数据分配存储单元。")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("n DUP (表达式)")])]),_._v(" "),t("p",[_._v("说明：n:重复次数 表达式：重复的内容")]),_._v(" "),t("p",[_._v("注意：")]),_._v(" "),t("ul",[t("li",[_._v("DUP操作可以嵌套。")]),_._v(" "),t("li",[_._v("在定义变量及存储单元的同时，也定义了它们的类型属性。同一数据定义语句所定义的各存储单元具有相同的类型。")])])])]),_._v(" "),t("hr"),_._v(" "),t("p",[_._v("3.段定义伪指令")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("段名 SEGMENT [定义类型][组合类型][‘类别名’]")])]),_._v(" "),t("p",[_._v("功能：把模块化分为若干逻辑段。每个SEGMENT/ENDS可定义一个逻辑段。")]),_._v(" "),t("hr"),_._v(" "),t("p",[_._v("4.段寄存器说明伪指令")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("ASSUME 段寄存器:段名[，段寄存器:段名…]")])]),_._v(" "),t("p",[_._v("功能：向汇编程序指示当前各段所用的段奇存器，设定段寄存器与段的对应关系。")]),_._v(" "),t("p",[_._v("注意：\n①本伪指令貝是指示各逻辑段使用寄存器的情況，没有对段奇存器内容进行装填。段寄存器的实际值(CS除外）还要由MOV指令在程序中装填数据。\n②也可用来取消段奇存器与段之间的对应关系（用NOTHING)，然后再建立新的对应关系。")]),_._v(" "),t("hr"),_._v(" "),t("p",[_._v("5.过程定义伪指令指令")]),_._v(" "),t("p",[_._v("过程是程序的一部分，它可以被程序调用。每次可调用一个过程，当过程中的指令执行完后，控制返回调用它的地方。过程的定义是用过程定义伪指令完成的。")]),_._v(" "),t("p",[_._v("格式：")]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("过程名 PROC [NEAR/FARI]\n\t\t…\n\n\t  RET\n过程名 ENDP  可有多个RET，一般作为最后一条指令\n\n过程名:自定义符，开始、结束要相同；有三个属性 （段地址，偏移地址和距离属性）\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br"),t("span",{staticClass:"line-number"},[_._v("4")]),t("br"),t("span",{staticClass:"line-number"},[_._v("5")]),t("br"),t("span",{staticClass:"line-number"},[_._v("6")]),t("br"),t("span",{staticClass:"line-number"},[_._v("7")]),t("br")])]),t("hr"),_._v(" "),t("p",[t("strong",[_._v("6.模块定义及通信伪指令")])]),_._v(" "),t("p",[_._v("汇编语言可以把程序划分成许多模块，并对每个模块独立地进行汇编和调试。")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("模块开始伪指令")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("NAME 模块名")])]),_._v(" "),t("p",[_._v("功能：指明程序模块的开始，并指出模块名。")]),_._v(" "),t("p",[_._v("说明：模块名是自定义符，不能是系统保留字。若该项缺省，则取TITLE语句中的页标题6个字符；若没有TITLE语句，则取源程序文件名为模块名。")])]),_._v(" "),t("li",[t("p",[_._v("模块结束伪指令（源程序结束伪指 令）")]),_._v(" "),t("p",[_._v("格式：END启动标号或过程名")]),_._v(" "),t("p",[_._v("功能：END表示一个模块（源程序）的结束。通知汇编程序源程序到此结束，并给出执行程序的入")])])]),_._v(" "),t("p",[_._v("注意：")]),_._v(" "),t("ul",[t("li",[_._v("END与NAME联合使用，当NAME缺省时，END 值表示原程序的结束。")]),_._v(" "),t("li",[_._v("汇编处理只进行到END为止。")])]),_._v(" "),t("h3",{attrs:{id:"_3-3宏定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3宏定义"}},[_._v("#")]),_._v(" 3.3宏定义")]),_._v(" "),t("p",[t("strong",[_._v("宏定义及其调用")])]),_._v(" "),t("p",[_._v("宏定义格式：")]),_._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[_._v("宏指令名 MACRO [形参，形参，...]\n\t\t\t... 宏体\n\t\t\tENDM\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br")])]),t("p",[_._v("宏调用的格式为：宏指令名 [实参，实参，...]")]),_._v(" "),t("hr"),_._v(" "),t("p",[_._v("扩展")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("ORG 偏移地址(16位地址)")])]),_._v(" "),t("p",[_._v("功能：声明偏移地址")]),_._v(" "),t("p",[_._v("格式："),t("code",[_._v("$")])]),_._v(" "),t("p",[_._v("功能：取当前偏移地址")]),_._v(" "),t("p",[_._v("ORG + 16位地址  ：声明偏移地址")])])}),[],!1,null,null,null);v.default=a.exports}}]);