(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{476:function(s,n,a){"use strict";a.r(n);var t=a(29),e=Object(t.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"微机原理简答题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微机原理简答题"}},[s._v("#")]),s._v(" 微机原理简答题")]),s._v(" "),a("p",[a("strong",[s._v("简述触发器、寄存器与存储器之间的关系：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：触发器是计算机记忆装置的基本单元，一个触发器能存储一位二进制数也为一个一位寄存器；\n\t多个出触发器就可以构成一个多位寄存器，而一个寄存器为为一个存储单元；\n\t多个寄存器组成一个存储器。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("计算机硬件组成的五个部件是什么：？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：输入设备、输出设备、运算器、存储器、控制器\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("计算器系统由什么组成？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：硬件系统和软件系统两部分组成。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("简述总线的定义：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：在计算机系统中，各个部件之间传送信息的公共通道叫做总线（BUS），\n按照所传输的信息种类可划分为数据总线、地址总线、控制总线。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("strong",[s._v("简述RISC（精简指令集）的特点：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：1、CPU处理指令是由硬件完成、运行速度快；\n    2、指令长度固定、指令格式种类少、寻址方式种类少；\n    3、只有取数/存数指令访问存储器，其余指令的操作都在寄存器内完成；\n    4、采用流水线技术，大部分指令在一个时钟周期内完成；\n    5、控制器采用组合逻辑控制，不用微程序控制。\n    6、采用优化的编译程序。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[a("strong",[s._v("寄存器按功能可分为几大类，分别说明包含什么寄存器？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：可分为3大类8个通用寄存器、4个段寄存器、2个控制寄存器；\n    分别是：通用寄存器又分为4个数据寄存器、2个地址寄存器、2个变址寄存器；\n            数据寄存器：AX（累加器）、BX（基址寄存器）、CX（计数寄存器）、DX（数据寄存器）\n            地址寄存器：BP（基址指针寄存器）、SP（堆栈指针寄存器）\n            变址寄存器：SI（源变址寄存器）、DI（目标变址寄存器）\n            段寄存器：CS（代码段寄存器）、DS（数据段寄存器）、ES（附加段寄存器）、SS（堆栈段寄存器）\n            控制寄存器：IP（指令寄存器）、FLAGS（状态标志寄存器）\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[a("strong",[s._v("简述8086和8088的区别：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：1.8086：是完全16位机，外部总线和内部总线是16根；\n      8088：内部总线是16根，外部总线是8根；\n    2.8086：有6字节的指令队列；\n      8088：有4字节的指令队列；\n    3.8086：使用M/IO非（IO非，低电平）引脚；\n      8088：使用IO/M非（M非，低电平）引脚；\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[a("strong",[s._v("简述最小工作模式：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：MN/MX非=1，为最小工作模式；\n    在系统中只有8086/8088一个微处理器，所有的总线控制信号直接由8086/8088产生；\n    因此，系统中的总线控制逻辑电路被减到最少，最小模式是单处理器系统。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("简述最大工作模式：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：MN/MX非=0，为最大工作模式；\n    系统中有两个或两个以上的微处理器；即除了主处理器8086/8088以外，\n还有协处理器（8087算数协处理器或8089输入输出协处理器），最大模式可构成多处理器系统，\n系统中所有的控制信号由总线控制器（8288）提供。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("最小工作模式与最大工作模式的区别：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：最大模式是相对最小模式而言的；\n    最大模式用在中等规模的或者大型8086/8088系统中；\n    在最大模式系统中，总是包含两个或多个微处理器其中一个主处理器就是8086/8088，\n其他的称为协处理器，它们是协助处理器工作的；\n    CPU工作模式的选择是由硬件决定的。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("简述中断的概念：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：当CPU执行主程序时，由于内外部事件使得CPU暂时中断当前主程序转而去执行子程序，\n\t当子程序执行完之后返回主程序的过程叫做中断。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("strong",[s._v("简述中断嵌套：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：中断嵌套是指中断系统正在执行一个中断服务子程序时，有另一个优先级更高的中断提出中断请求，\n这时会暂停终止当前正在执行的级别较低的中断源的服务程序，去处理级别更高的中断源，待处理完毕，\n再返回到被中断了的中断服务子程序继续执行的过程。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("中断响应过程中为什么要保护现场，如何保护？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：因为一般主程序和中断服务程序都可能会用到累加器，PSW寄存器及其他一些寄存器。\nCPU在进入中断服务程序后，用到上述寄存器时，就会破坏它原来存在寄存器中的内容；\n一旦中断返回，将会造成主程序的混乱。因而在进入中断服务程序后，一般要先保护现场，\n然后再执行中断处理程序，在返回主程序以前再恢复现场。\n\t保护方法一般是把累加器、PSW寄存器及其他一些与主程序有关的寄存器压入堆栈。\n在保护现场和恢复现场时，为了不使现场受到破坏或者造成混乱，一般规定此时CPU不响应新的中断请求。\n这就要求在编写中断服务程序时，注意在保护现场之前要关中断，在恢复现场之后开中断。\n如果在中断处理时允许有更高级的中断打断它，则在保护现场之后再开中断，恢复现场之前关中断。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[a("strong",[s._v("中断源的识别通常有哪两种方法，并简述其特点：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：查询中断和向量中断；\n\t前者的特点时多个中断源共用一个中断入口服务程序，通过执行一段查询程序，\n确定引起中断的中断源状态，然后做相应的中断处理。\n\t后者的特点是每个中断源对应一个中断服务入口地址，由中断向量来指示中断服务程序入口地址。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("简述IDE、SCSI、SATA接口总线：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：是硬盘和光驱接口标准。\n\tIDE：Intergrated Drive Electronics；【电子集成驱动器】16/32位\n\tSCSI：Small Computer System Interface；【小型计算机系统接口】32位\n\tSATA：串行ATA（Serial ATA），SATA3.0接口。【目前硬盘和光驱的主要接口】\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("简述IEEE394总线、AGP总线、PCI总线功能：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：IEEE394总线：是高性能串行总线标准；视频采集、数码影像设备的传输标准。\n\tAGP总线：图形加速口：提高视频带宽。\n\tPCI总线：（Peripheral Component Interconnect）外设部件互联标准；\n\t\t可以通过桥连接多条PCI总线；PCI总线上的设备可以与CPU并行工作。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("总线的性能指标：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：1、总线贷款：数据传输率，单位：bps\n\t2、总线位宽：同时传输的二进制位数；\n\t一次所能并行传送信息的位数，亦称为数据路宽度。\n\t3、总线工作频率：Mhz\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("88/86两个单元的功能：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：1、BIU：负责CUP对主存和外设接口进行访问\n\t\t①取指令：从内存取指令，送指令队列\n\t\t④取操作数：从内存或接口取操作数\n\t\t⑦送结果：从BIU送内存或接口外设\n\t2、EU：负责指令译码、执行和数据的运算\n\t\t②取指令：从指令队列取指令送控制器\n\t\t③分析译码：识别指令功能\n\t\t⑤执行指令：在ALU中运算加工\n\t\t⑥送结果：由EU送BIU\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[a("strong",[s._v("写出CPU中主要寄存器：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：AX、BX、CX、DX、SI、DI、BP、SP、IP、CS、DS、ES、SS、FR\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("寄存器、cache、内存和外存的区别：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：寄存器：是CUP内部暂存数据单元，如：AX、BX等；\ncache：位于CPU和内存之间，可直接与CPU进行数据交换，解决内存速度不足的问题；\n内存：也叫主存，可直接与CPU进行数据交换；\n外存：主要用来长久保存数据，如：硬盘、光盘、U盘等。外存的数据只能通过主存间接地与CPU交换数据。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("8086为什么要采用分体结构：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：存储体以8位（1B）作为基本存储单位；\n访问一个字节时，只用16位数据线中的8位；\n访问一个字时，16位数据线的高8位和低8位同时访问两个存储单元，提高了CPU的效率。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("如何划分奇偶体：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：在8086系统中，将总容量为1MB的存储器分为奇地址存储体和偶地址存储体，各为512K；\n\t奇体与高8位（D15——D8）相连；\n\t偶体与低8位（D7——D0）相连；\n\t选择奇体还是偶体由信号BHE！、A0决定。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("在8086微处理器构成的系统中，什么是存储器的规则字和非规则字？8086微处理器对一个规则字和一个非规则字读写时，有什么区别？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：规则字：从偶地址开始的字；\n\t读写规则字时：只需要一个总线周期，BHE!=0、A0=0\n\t非规则字：从奇地址开始的字；\n\t读写规则字时：需要两个个总线周期；\n\t\t读奇地址内容D8-D15（BHE!=0、A0=1）、读偶地址内容D0-D7（BHE!=1、A0=0）\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("ROM、PROM、EPROM和EEPROM在使用上各有什么特点？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：ROM：掩膜ROM，信息制作在芯片中，不可更改\n\tPROM：允许一次编程，此后不可更改\n\tEPROM：紫外线照射擦除，可多次擦除和编程，未编程前所有单元格信息都为1，写入后的部分为0\n\tEEPROM：加电在线擦除和编写，可多次擦写\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("简述CPU与外部设备采用中断控制方式传输数据的过程。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：\n（1）当外部设备需要与CPU进行数据交换时，由接口部件8259芯片发出一个中断请求信号；\n（2）CPU响应这一中断请求，便可在中断服务程序中完成一个字节或一个字的信息交换；\n（3）数据交换完成后，返回原程序。\n（4）CPU每执行一次中断传送数据，要打断原来执行的程序去执行中断服务子程序。\n（5）执行前要保护PSW和断点，执行后再恢复它们。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[a("strong",[s._v("简述中断传送方式和DMA传送方式相比有什么不同。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：1、中断方式通过程序实现数据传送，而DMA方式直接靠硬件来实现，信息传输速度快。\n\t2、CPU对中断的响应是在执行完一条指令之后，而对DMA的响应则可以在指令执行过程中的任何总线周期之后，请求响应快。\n\t3、中断方式必须切换程序，要进行CPU现场的保护中恢复操作。DMA仅挪用了一个存储周期，不改变CPU现场，额外花销小。\n\t4、DMA请求的优先权比中断请求高。CPU优先响应DMA请求。\n\t5、中断方式不仅具有I/O数据传送能力，而且还能处理异常事件，DMA只能进行I/O数据传送。\n总而言之，在进行I/O控制时，DMA控制方式比程序中断控制方式速度快，但程序中断控制方式的应用范国比DMA控制方式广。\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[a("strong",[s._v("简述缓冲器、锁存器和触发器的作用。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：\n（1）缓冲器：又称缓冲寄存器。\n\t①完成速度的匹配，在高速工作的 CPU 与慢速工作的外设间起协调和缓冲作用，实现数据传送的同步。（1 分）\n\t②提供一个暂存的空间。它分输入缓冲器和输出缓冲器两种。输入缓冲器是将外设送来的数据暂时存放，以便处理器将它取走；输出缓冲器是用来暂时存放处理器送往外设的数据。（1 分）\n\t③提高驱动能力。（1 分）\n\t④信号隔离的作用，消除负载对信号源的影响。（1 分）\n（2）锁存器（latch）：利用电平控制数据的传输。（1 分）\n\t①缓存。（1 分）\n\t②完成高速的控制器与慢速的外设的不同步问题。（1 分）\n\t③解决驱动的问题。（1 分）\n（3）触发器：是最小的记忆单元,能记忆二进制数的一个数位，是寄存器、存储器基本元件。（2 分）\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[a("strong",[s._v("什么是中断？计算机使用中断的好处？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：\n（1）中断是指当处理器执行主程序时，由于内外部事件转而去执行子程序，当子程序执行完成后返回主程序的过程。（2 分）\n(2) 中断的优点：\n\t① 解决快速 CPU 与慢速外设之间的矛盾，使 CPU 可以与外设同时工作，不交换信息时，处理器和外围设备处于各自独立的并行工作状态。提高计算机系统效率。（2 分）\n\t② 维持系统可靠正常工作。在程序运行过程中，如出现异常，向处理器发出中断请求，处理器立即采取保护措施。（2 分）\n\t③ 计算机实现对控制对象的实时处理，处理器随时响应外设请求并处理。（2 分）\n\t④ 计算机可以对故障自行处理。处理器中设有各种故障检测和错误诊断的部件，一旦发现故障或错误，立即发出中断请求，进行故障现场记录和隔离。（2 分）\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[a("strong",[s._v("什么叫端口？通常有哪几类端口？计算机对I/O端口编址时采用哪两种方法？在8086/8088系统中，用哪种方法对I/O端口进行编址？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：\n（1）CPU 和外设进行数据传输时，各类信息在接口中进入不同的寄存器，一般称这些寄存器为端口。（2 分）\n（2）端口通常有 3 类：数据端口、状态端口、控制端口。（3 分）\n（3）计算机对端口编址的两种方法为：计算机对内存和 I/O 端口统一编址；计算机对内存和I/O端口独立编址。（4 分）\n（4）在 8086/8088 系统中用内存和 I/O 端口各自独立编址。（1 分）\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("“8086执行了一个总线周期”是指8086做了哪些可能的操作？基本总线周期如何组成？在一个典型的都存储周期中，地址信号、ALE信号 ， "),a("span",{staticStyle:{"text-decoration":"overline"}},[s._v("RD")]),s._v(" 信号、数据信号分别在何时产生？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：（1）“8086执行了一个总线周期”是指：\n\t\t1、8086可能从片外的存储器取指令；\n\t\t2、8086可能对片外的存储器或I/O接口进行了一次读/写数据的操作。\n\t（2）基本总线周期由T1至T4四个时钟周期组成。\n\t（3）在一个典型的读存储器总线周期中，地址信号在 T1 周期内产生，ALE 信号在T1 周期内产生，\n\t\tRD信号在 T2 周期内产生，数据信号一般在 T3 周期内产生，若存储器在 T3 内来不及提供数据，\n\t\t8086 会在总线周期中的 T3 后插入等待状态 Tw，存储器将在某 Tw 中给出数据。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[a("strong",[s._v("什么是地址锁存器？8088/8086为什么要用地址锁存器？锁存的是什么信息？举例说明。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：（1）地址锁存器是一个暂存器，它根据控制信号的状态将总线上的地址代码暂存起来。\n\t（2）8088/8086 的数据和地址总线采用分时复用操作方式，即用同一总线既传送地址又传送数据。\n\t\t当微处理器与存储器交换信号时，首先由 CPU 发送存储器的地址，同时发允许锁存信号ALE给锁存器，\n\t\t当锁存器接到该信号后将地址/数据总线上的地址锁存在锁存器中，随后才能传送数据信息。\n\t（3）8088/8086 系统的地址锁存器采用 74LS373/273 或者 8282/8283，每片能够锁8 位地址。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("什么是中断类型码、中断向量、中断向量表？在基于8088/8086的微机操作系统中中断类型码和中断向量之间有什么关系？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：处理机可处理的每种中断的编号为中断类型码。\n\t中断向量是指中断处理程序的入口地址，由处理机自动寻址。\n\t中断向量表是存放所有类型中断处理程序入口地址的一个默认的内存区域。\n\t在 8086 系统中，中断类型码乘以 4 得到向量表的地址指针，\n\t从此处读出4 字节内容即为中断向量。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("8086CPU从接口上分为几部分？各部分由什么组成？各部分功能是什么？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：（1）8086CPU 从功能上分为两大部分：一是执行部件(EU)，二是总线接口部件(BIU)。\n\t（2）执行部件(EU)是由以下 4 部分组成：\n\t\t①4 个通用寄存器：AX、BX、CX、DX。\n\t\t②4 个专用寄存器：基址指针寄存器 BP，堆栈指针寄存器 SP，源变址寄存器SI，目的变址寄存器DI。\n\t\t③标志寄存器 FR。\n\t\t④算术逻辑部件 ALU。\n\t\t功能：负责执行所有的指令，向总线接口部件(BIU)提供指令执行的结果数据和地址，并对通用寄存器和标志寄存器进行管理。\n\t（3）总线接口部件(BIU)由以下部件组成:\n\t\t①4 个段寄存器：代码段寄存器 CS，数据段寄存器 DS，附加段寄存器 ES，堆栈段寄存器SS。②指令指针寄存器。\n\t\t③地址加法器。\n\t\t④指令队列。\n\t\t功能：执行外部总线周期，负责 CPU 与主存储器和外设之间的信息交换。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[a("strong",[s._v("8086如何响应一个INTR中断请求？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：在 INTR 中断请求响应条件满足的情况下，\n\t(1) 8086 在连续的两个总线周期中发出INTA中断请求响应信号；\n\t(2) 在第二个 INTA信号期间，中断源经数据总线向 8086 发出一字节的中断类型码，8086 收到中断类型码后放入暂存器；\n\t(3) 8086 保护现场：标志寄存器入栈，清除 IF、TF 标志位，断点 CS、IP 值入栈；\n\t(4) 8086 将中断类型码乘以 4 后得到中断向量表的入口地址，从此地址开始的4 个单元中读出中断服务程序的入口地址（IP，CS）；\n\t(5) 8086 从此地址取指令执行，使控制转向中断处理过程。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[a("strong",[s._v("站在80X86，汇编语言程序员的角度，说明数据存储位置有哪些？访问这些数据可采用的寻址方式分别是什么？对这些位置对数据访问速度是否相同，为什么？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：（1）数据存储位置有 CPU 内部的寄存器、内存、IO 端口\n\t（2）采用的寻址方式分别是：\n\t\t①寄存器操作数采用寄存器寻址\n\t\t②存储器操作数采用直接寻址，寄存器间接寻址，寄存器相对寻址，基址变址寻址，相对基址变址寻址 \n\t\t③IO 端口的访问需专门的 IO 指令，有直接寻址和间接寻址。\n\t（3）速度不同，寄存器位于 CPU 内部，因此速度最快，存储器操作数速度较慢，因为需要通过系统总线访问内存，\n\t\t端口的访问最慢，属于输入/输出操作。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[a("strong",[s._v("什么是总线，简述各类总线的应用场合？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：（1）总线（Bus）是计算机各种功能部件之间传送信息的公共通信线，\n\t\t它是CPU、内存、输入、输出设备传递信息的公用通道，主机的各个部件通过总线相连接，\n\t\t外部设备通过相应的接口电路再与总线相连接，从而形成了计算机硬件系统。\n\t（2）按总线功能或信号类型来分，有数据总线、地址总线和控制总线。 按总线的层次结构分来为，有：\n\t\t① CPU 片内总线：微机系统中速度最快的总线，主要在 CPU 内部，连接 CPU 内部部件，提供系统原始的控制和命令。\n\t\t②系统总线：在系统总线和 CPU 总线之间的一级总线，提供 CPU 和主板器件之间以及CPU到高速外设之间的快速信息通道。\n\t\t③通信总线：也称为外部总线，是微机与微机、微机与外设之间进行通信的总线。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[a("strong",[s._v("简述在最小工作模式下，8086如何响应一个总线请求？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：外部总线主控模块经 HOLD 引线向 8086 发出总线请求信号；\n\t8086 在每个时钟周期的上升沿采样HOLD 引线；\n\t若发现 HOLD=1 则在当前总线周期结束时(T4 结束)发出总线请求的响应信号HLDA；\n\t8086使地址、数据及控制总线进入高阻状态，让出总线控制权，完成响应过程。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("简述CPU与外设进行数据交换的方式，并说明每种方式的特点。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：CPU 与外设进行数据交换的方式有：无条件传送方式、查询传送方式、中断控制方式、直接存储器存取控制方式（DMA）和通道方式。\n\t（1）程序控制方式: 特点是依靠程序的控制来实现主机和外设的数据传送，可分为无条件传送方式、查询方式和中断方式。\n\t\t三种方式都是以 CPU 为中心的控制方式，都需要 CPU 执行程序来进行I/O数据传送。\n\t\t①无条件传送方式：程序简单，所需的硬件和软件都比较少、传送速度快，但必须在确信外设已准备好的情况下才能使用。\n\t\t②查询传送方式：CPU 通过程序不断查询相应设备的状态，状态不符合要求，则CPU 需要等待；只有当状态信号符合要求时，\n\t\t\tCPU 才能进行相应的操作。硬件线路简单，程序易于实现；缺点是CPU利用率低下，实时性差。\n\t\t③中断控制方式: 外设在准备就绪的条件下通过请求引脚信号，主动向处理器提出交换数据的请求。CPU与外设、外设与外设之间能并行工作。\n\t\t\t一般适合于传送数据量少的中低速外部设备，尤其适合实时控制中的紧急事件处理，对于高速外部设备的大批量数据传送不适合。\n\t（2）直接存储器存取控制方式（DMA）：CPU 不参加数据传送，而是由 DMA 控制器来实现内存与外设，外设与外设之间的直接传递。\n\t\t此种方式适用于需要大量数据高速传送的场合。CPU 与外设可以并行工作，提高了 CPU 的效率。\n\t（3）通道方式：可以实现对外围设备的统一管理和外围设备与内存之间的数据传送。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[a("strong",[s._v("一般接口电路中具有哪些电路器件？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：（1）输入/输出数据锁存器和缓冲器，用于解决 CPU 与外设之间速度不匹配的矛盾，以及起隔离和缓冲的作用。\n\t（2）控制命令和状态寄存器，以存放 CPU 对外设的控制命令以及外设的状态信息。\n\t（3）地址译码器，用于选择接口电路中的不同端口（寄存器）。\n\t（4）读写控制逻辑。\n\t（5）中断控制逻辑。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("比较串行通信与并行通信的优缺点。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：（1）从传送距离上看：并行通信适宜于近距离的数据传送，通常小于 30 米；而串行通信适宜于远距离的数据传送可以从几米到数千公里；\n\t（2）从传送速度上看：并行通信传送数据的速度比串行通信快得多；\n\t（3）从传送设备和费用上：在远距离传送中通信线路的费用占很大的比重，因而串行通信的费用由于传送线少，比并行通信的费用低得多。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("什么叫总线周期？8086CPU的一个总线周期包括多少时钟周期，什么情况下要插入Tw等待周期？插入多少个Tw取决于什么因素？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('答：8086/8088CPU 把 BIU 完成一次访问主存储器或外设操作所需的时间称为一个总线周期。一个总线周期最少包含 4 个时钟周期（T1~T4）。\n\t当访问存储器（读/写）或外设时，存储器或外设不能及时地配合 CPU 传送数据，T3 之后插入一个或多个等待等待周期 Tw。\n\t当存储器或外设准备好数据，通过“READY”发“准备好”信号，CPU 接收到这个信号后，会自动完成Tw 状态进人 T4 状态，因此插入多少个 Tw 取决于“READY"信号，即取决于主存或外设的速度。\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("在8086/8088系统中，什么是最大模式？什么是最小模式？用什么方法将8086/8088置为最大模式或最小模式？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：（1）最小模式：在系统中只有 8086/8088 一个微处理器，所有的总线控制信号都直接由 8086/8088产生，因此，系统中总线控制电路被减到最少。\n\t（2）最大模式：在系统中包含两个或多个微处理器，其中一个主处理器就是 8088/8086，其它处理器为协处理器，用于协助主处理器工作。它用在中等规模或大型的 8088/8086 系统中。一般情况下和 8088/8086配合的协处理器有两个：一个是数值运算协处理器 8087，一个是输入/输出协处理器 8089。\n\t（3）将 8088/8086 CPU 的第 33 脚接地，系统处于最大模式，当第 33 脚接+5V 时，系统为最小模式。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("8259A的主要功能是什么？三个寄存器IRR、IMR、ISR各有什么作用？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：（1）8259 的功能：\n\t\t①可以管理 8 级中断，通过级联的方式，用 9 片 8259 管理 64 级中断。\n\t\t②判断一个中断请求输入信号 IR 是否有效，是否符合信号的电器约定，是否被屏蔽。\n\t\t③有中断优先逻辑，并可对任一中断单独屏蔽或允许。8259A 的 8 个中断请求输入端 IR0~IR7，哪一个能使 INT 输出有效要由编程选定的优先级方式来判定。\n\t\t④CPU 响应中断后，进入中断响应周期INTA ，8259A 能将获得优先级的 IRi所对应的中断类型号送上数据总线提供给 CPU。\n\t\t⑤ 可通过编程选择工作方式。\n\t（2）三个寄存器 IRR、IMR 和 ISR 的作用：\n\t\t①中断请求寄存器 IRR：保存 8 条外界中断请求信号 IR0～IR7 的请求状态。Di 位为 1 表示 IRi 引脚有中断请求；为 0 表示该引脚无请求。\n\t\t②中断屏蔽寄存器 IMR：保存对中断请求信号 IR 的屏蔽状态。Di 位为 1 表示 IRi 中断被屏蔽（禁止）；为0 表示允许该中断。\n\t\t③中断服务寄存器 ISR：保存正在被 8259A 服务着的中断状态。Di 位为 1 表示 IRi 中断正在服务中；为 0表示没有被服务。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[a("strong",[s._v("简述半导体存储器的主要技术指标。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：（1）存储容量。存储器可以存储的二进制信息总量称为存储容量。存储容量有两种表示方法：\n\t\t①位表示方法。以存储器中的存储地址总数与存储字位的乘积表示。如 1K×4 位，表示该芯片有 1K 个单元（1K＝1024），每个存储单元的长度为 4 个二进制位。\n\t\t②字节表示方法。以存储器中的单元总数表示（一个存储单元由 8 个二进制位组成，称为一个字节，用 B 表示）。如 128B，表示该芯片有 128 个单元。\n\t（2）存取速度。存储器的存储速度可以用两个时间参数表示，一个是存取时间：从启动一次存储器操作到完成该操作所经历的时间；另一个是存储周期：启动两次独立的存储器操作之间所需的最小时间间隔。\n\t（3）可靠性。存储器的可靠性用平均故障间隔时间 MTBF 来衡量。MTBF 越长，可靠性越高。\n\t（4）存储带宽。单位时间传输的信息量。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("hr"),s._v(" "),a("p",[s._v("12111111111111122121212")]),s._v(" "),a("p",[a("strong",[s._v("论指令周期、总线周期和时钟周期的关系。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：（1）执行一条指令所需要的时间称为指令周期；\n\t（2）CPU 同外部设备或内存储器之间进行信息交换过程所需要的时间称为总线周期，即启用一次总线进行读或写的时间；\n\t（3）时钟脉冲的重复周期称为时钟周期，它是 CPU 主频的倒数；\n\t（4）一个指令周期由若干个总线周期组成，一个总线周期又由若干个时钟周期组成；\n\t（5）8086CPU 的总线周期至少由 4 个时钟周期组成，当外设不能在 CPU 规定时间内准备好数据时，要在总线周期中插入等待周期。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("CPU响应中断时，为什么要执行两个连续的中断响应周期？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：CPU 响应中断时，执行两个连续的中断响应周期，每个响应周期都给出中断响应信号INTA。\n\t这是因为第一个总线周期通知中断请求设备，微处理器准备响应中断，中断控制器 8259A 应该准备好中断类型码，8259A 的 ISR 和 IRR 对应位分别置 1 清 0；\n\t第二个总线周期中，8259A 把中断类型号送上数据总线，微处理器接收中断类型码，以便得到中断向量，即得到中断服务程序的入口地址。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("8086CPU中有哪些寄存器？分别有什么用途。哪些寄存器用来指示存储器单元的偏移地址。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：8086 CPU 中有 8 个通用寄存器 AX、BX、CX、DX、SP、BP、SI、DI；\n\t两个控制寄存器 IP、FR；\n\t四个段寄存器 CS、DS、SS、ES。\n\t8 个通用寄存器都可以用来暂存参加运算的数据或中间结果，但又有各自的专门用途。\n\t例如：AX 专用做累加器，某些指令指定用它存放操作数和运算结果；CX 为计数寄存器，在某些指令中做计数器使用；DX 为数据寄存器；BX 为基址寄存器，BP 为基址指针，SI 为源变址寄存器，DI 为目的变址寄存器，这 4 个寄存器在数据寻址中用来存放段内偏移地址（有效地址）或段内偏移地址的一部分；SP 为堆栈指示器，用来存放栈顶有效地址。\n\t两个控制寄存器用来存放有关的状态信息和控制信息。\n\t例如：标志寄存器 FR 用来存放状态标志和控制标志；而指令指针用来存放下一条要取指令的有效地址。\n\t四个段寄存器用来存放段地址。\n\t例如：CS 寄存器用来存放代码段的段地址；DS 寄存器用来存放数据段的段地址；SS 寄存器用来存放堆栈段的段地址；ES 寄存器用来存放扩展段的段地址。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[a("strong",[s._v("在8086中，逻辑地址、偏移地址、物理地址分别指的是什么？具体说明。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：逻辑地址是在程序中对存储器地址的一种表示方法，由段地址和段内偏移地址两部分组成，\n\t如 1234H：0088H。\n\t偏移地址是指段内某个存储单元相对该段首地址的差值，是一个 16 位的二进制代码。物理地址是 8086 芯片引线送出的 20 位地址码，用来指出一个特定的存储单元。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("简述流水线技术，8086怎样实现了最简单的流水线？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：流水线是指在程序执行时多条指令重叠进行操作的一种并行处理实现技术。流水线的并行处理是指完成一条指令的各个部件在时间上是可以同时重叠工作，分别同时为多条指令的不同部分进行工作，以提高各部件的利用率来提高指令的平均执行速度。流水线技术是把一个重复的过程分解为若干子过程，每个子过程由专门的功能部件来\n实现，将多个处理过程在时间上错开，依次通过个功能段，这样，每个子过程就可以与其他子过程并行进行。\n\t8086 中，指令的读取是在 BIU 单元，而指令的执行是在 EU 单元。因为 BIU 和 EU 两个单元相互独立、分别完成各自操作，所以可以并行操作。也就是说，在 EU 单元对一个指令进行译码执行时，BIU 单元可以同时对后续指令进行读取；这就是最简单的指令流水线技术。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("比较8255A三种工作方式的应用场合有何区别？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：方式 0 适用于同步传送和查询传送方式，\n\t方式 1 适用于外设在能提供选通信号或数据接收信号的场合，且采用中断传送方式比较方便；\n\t方式 2 适用于一个并行外设既可以作为输入设备，又可以作为输出设备，并且输入和输出不会同时进行的场合。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("试述程序查询传送方式的工作原理，与查询传送方式相比，中断传送方式有什么优点？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：查询传送方式在传送数据前先查询外设的状态，当外设准备好时，CPU 执行 I/O指令传送数据；若未准备好时，则 CPU 等待。优点：能较好地协调外设与 CPU 之间的定时关系，因而比无条件传送方式容易实现准确传送。缺点:该方式需要不断查询外设的状态，大量时间花在等待循环中，当主机与中、低速外设交换信息时，大大降低了 CPU 利用率。中断传送方式的优点：提高了 CPU 的效率；CPU 与外设、外设与外设之间能并行工作。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("什么叫端口？计算机对I/O端口进行编址时常采用哪俩种方法？在8086/8088系统中，用哪种方法对I/O端口进行编址？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：CPU 和外设进行数据传输时，各类信息在接口中进入不同的寄存器，一般称这些寄存器为端口。\n\t通常有：数据端口、状态端口、控制端口。\n\t对端口编址的两种方法为：计算机对内存和 I/O 端口统一编址；计算机对内存和 I/O 端口独立编址。\n\t在 8086/8088 系统中用计算机对内存和 I/O 端口独立编址。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("简述8086内部中断的种类级特点。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：（1）内部中断又称软件中断，是通过软件调用的不可屏蔽中断，包括溢出中断、除法出错中断、单步中断、INT n 指令中断及单字节 INT3 指令中断。\n\t（2）中断类型码或者包含在指令中，或者是预先规定的；\n\t（3）不执行 INTA 总线周期；\n\t（4）除单步中断外，任何内部中断都无法禁止；\n\t（5）除单步中断外，任何内部中断的优先级都比任何外部中断的高。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("汇编语言程序的开发有哪4个步骤，分别利用什么程序完成、产生输出什么文件。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：汇编语言程序的开发有 4 个步骤：\n\t编辑：用文本编辑器形成一个以 ASM 为扩展名的源程序文件。\n\t汇编：用汇编程序将 ASM 文件转换为 OBJ 模块文件。\n\t连接：用连接程序将一个或多个目标文件链接成一个 EXE 或 COM 可执行文件。\n\t调试：用调试程序排除错误，生成正确的可执行文件。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("以可屏蔽中断为例，说明一次完整的中断过程主要包括哪些环节。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：中断请求：外设通过硬件信号的形式、向处理器引脚发送有效请求信号。\n\t中断响应：在满足一定条件时，处理器进入中断响应总线周期。\n\t关中断：处理器在响应中断后会自动关闭中断。\n\t断点保护：处理器在响应中断后将自动保护断点地址。\n\t中断源识别：处理器识别出当前究竟是哪个中断源提出了请求，并明确与之相应的中断服务程序所在主存位置。\n\t现场保护：对处理器执行程序有影响的工作环境（主要是寄存器）进行保护。\n\t中断服务：处理器执行相应的中断服务程序，进行数据传送等处理工作。\n\t恢复现场：完成中断服务后，恢复处理器原来的工作环境。\n\t开中断：处理器允许新的可屏蔽中断。\n\t中断返回：处理器执行中断返回指令，程序返回断点继续执行原来的程序。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[a("strong",[s._v("8086处理器的输入输出信号有RESET、HOLD、NMI和INTR，其中含义各是什么？当它们有效时，8086CPU将出现何种反应？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：RESET：复位输入信号，高电平有效。该引脚有效时，将迫使处理器回到其初始状态；转为无效时，CPU 重新开始工作。\n\tHOLD：总线请求，是一个高电平有效的输入信号。该引脚有效时，表示其他总线主控设备向处理器申请使用原来由处理器控制的总线。\n\tNMI：不可屏蔽中断请求，是一个利用上升沿有效的输入信号。该引脚信号有效时，表示外界向 CPU 申请不可屏蔽中断。\n\tINTR：可屏蔽中断请求，是一个高电平有效的输入信号。该引脚信号有效时，表示中断请求设备向处理器申请可屏蔽中断。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("DMA控制器有哪俩种工作状态？并说明DMA传送的一般过程。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：(1)DMA 控制器有两种工作状态：\n\t\t①主方式：DMA 控制器 8237A 是系统总线的主控者，取代 CPU 控制 DMA 传送。\n\t\t②从方式：在成为主控者之前，必须由 CPU 对它编程以确定通道的选择、数据传送的模式、存储器区域首地址、传送总字节数等。这时对于 CPU 来说，8237A 只是个外部设备，是系统总线的从设备。\n\t（2）DMA 传送的一般过程：\n\t\t①外设向 DMAC 发出 DMA 请求；\n\t\t②DMAC 向 CPU 发出 DMA 请求；\n\t\t③CPU 执行完当前的总线周期后，向 DMAC 发出响应请求的应答信号，CPU 让出总线的控制权，由 DMAC 控制；\n\t\t④DMAC 向外设发出 DMA 请求的应答信号；\n\t\t⑤进行 DMA 传送，传送完毕，CPU 重新控制总线\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[a("strong",[s._v("8259A的ICW2设置了中断类型码的哪几位？并说明对8259A分别设置ICW2为30H、38H、36H有什么差别？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：ICW2 设置了中断类型码的高 5 位，所以中断类型码基值必须是能被 8 整除的值。\n\t若 ICW2 设置为 30H，则 8 级中断的类型码依次为 30H~37H。\n\t若设置为 38H，则 8 级中断的类型码依次为 38H~3FH。\n\t若设置为 36H，中断类型码为 30H~37H，因其高 5 位仍为00110B。\t\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("8086系统中存储器的逻辑地址由哪两部分组成？物理地址由何器件生成？如何生成？每个段的逻辑地址与存储器之间有何对应关系？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：答：（1）8086 系统中存储器的逻辑地址由段地址（段首址）和段内偏移地址（有效地址）两部分组成；\n\t（2）存储单元的物理地址由地址加法器生成。\n\t（3）寻址时，CPU 首先将段地址和段内偏移地址送入地址加法器，地址加法器将段地址左移 4 位并与段内偏移地址相加，得到一个 20 位的物理地址。\n\t（4）数据段的段地址在 DS 寄存器中，段内偏移地址可能在 BX、BP、SI 或 DI 寄存器中。\n\t\t代码段的段地址在 CS 寄存器中，段内偏移地址在 IP 寄存器中。\n\t\t堆栈段的段地址在SS 寄存器中，段内偏移地址在 SP 寄存器中。\n\t\t扩展段的段地址在 ES 寄存器中，段内偏移地址可能在 BX、BP、SI 或 DI 寄存器中。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("hr"),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("hr"),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("hr"),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("hr"),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("hr"),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("hr"),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("hr"),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("hr"),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("hr"),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("hr"),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("hr"),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])}),[],!1,null,null,null);n.default=e.exports}}]);